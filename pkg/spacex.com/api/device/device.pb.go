// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.4
// source: spacex/api/device/device.proto

package device

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	status "github.com/starlink-community/starlink-grpc-go/pkg/github.com/virtuallynathan/starlink-grpc-go/pkg/github.com/virtuallynathan/starlink-grpc-go/pkg/github.com/virtuallynathan/starlink-grpc-go/pkg/github.com/virtuallynathan/starlink-grpc-go/pkg/spacex.com/api/status"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ToDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*ToDevice_Request
	Message isToDevice_Message `protobuf_oneof:"message"`
}

func (x *ToDevice) Reset() {
	*x = ToDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToDevice) ProtoMessage() {}

func (x *ToDevice) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToDevice.ProtoReflect.Descriptor instead.
func (*ToDevice) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{0}
}

func (m *ToDevice) GetMessage() isToDevice_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ToDevice) GetRequest() *Request {
	if x, ok := x.GetMessage().(*ToDevice_Request); ok {
		return x.Request
	}
	return nil
}

type isToDevice_Message interface {
	isToDevice_Message()
}

type ToDevice_Request struct {
	Request *Request `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

func (*ToDevice_Request) isToDevice_Message() {}

type FromDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*FromDevice_Response
	//	*FromDevice_Event
	Message isFromDevice_Message `protobuf_oneof:"message"`
}

func (x *FromDevice) Reset() {
	*x = FromDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromDevice) ProtoMessage() {}

func (x *FromDevice) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromDevice.ProtoReflect.Descriptor instead.
func (*FromDevice) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{1}
}

func (m *FromDevice) GetMessage() isFromDevice_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *FromDevice) GetResponse() *Response {
	if x, ok := x.GetMessage().(*FromDevice_Response); ok {
		return x.Response
	}
	return nil
}

func (x *FromDevice) GetEvent() *Event {
	if x, ok := x.GetMessage().(*FromDevice_Event); ok {
		return x.Event
	}
	return nil
}

type isFromDevice_Message interface {
	isFromDevice_Message()
}

type FromDevice_Response struct {
	Response *Response `protobuf:"bytes,1,opt,name=response,proto3,oneof"`
}

type FromDevice_Event struct {
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3,oneof"`
}

func (*FromDevice_Response) isFromDevice_Message() {}

func (*FromDevice_Event) isFromDevice_Message() {}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EpochId  uint64 `protobuf:"varint,14,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	TargetId string `protobuf:"bytes,13,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Types that are assignable to Request:
	//	*Request_SignedRequest
	//	*Request_GetNextId
	//	*Request_Authenticate
	//	*Request_FactoryReset
	//	*Request_GetDeviceInfo
	//	*Request_GetHistory
	//	*Request_GetLog
	//	*Request_GetNetworkInterfaces
	//	*Request_GetPing
	//	*Request_PingHost
	//	*Request_GetStatus
	//	*Request_Reboot
	//	*Request_SetSku
	//	*Request_SetTrustedKeys
	//	*Request_SpeedTest
	//	*Request_Update
	//	*Request_DishStow
	//	*Request_TransceiverIfLoopbackTest
	//	*Request_TransceiverGetStatus
	//	*Request_WifiGetClients
	//	*Request_WifiGetPingMetrics
	//	*Request_WifiSetConfig
	//	*Request_WifiSetup
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Request) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *Request) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *Request) GetSignedRequest() *SignedData {
	if x, ok := x.GetRequest().(*Request_SignedRequest); ok {
		return x.SignedRequest
	}
	return nil
}

func (x *Request) GetGetNextId() *GetNextIdRequest {
	if x, ok := x.GetRequest().(*Request_GetNextId); ok {
		return x.GetNextId
	}
	return nil
}

func (x *Request) GetAuthenticate() *AuthenticateRequest {
	if x, ok := x.GetRequest().(*Request_Authenticate); ok {
		return x.Authenticate
	}
	return nil
}

func (x *Request) GetFactoryReset() *FactoryResetRequest {
	if x, ok := x.GetRequest().(*Request_FactoryReset); ok {
		return x.FactoryReset
	}
	return nil
}

func (x *Request) GetGetDeviceInfo() *GetDeviceInfoRequest {
	if x, ok := x.GetRequest().(*Request_GetDeviceInfo); ok {
		return x.GetDeviceInfo
	}
	return nil
}

func (x *Request) GetGetHistory() *GetHistoryRequest {
	if x, ok := x.GetRequest().(*Request_GetHistory); ok {
		return x.GetHistory
	}
	return nil
}

func (x *Request) GetGetLog() *GetLogRequest {
	if x, ok := x.GetRequest().(*Request_GetLog); ok {
		return x.GetLog
	}
	return nil
}

func (x *Request) GetGetNetworkInterfaces() *GetNetworkInterfacesRequest {
	if x, ok := x.GetRequest().(*Request_GetNetworkInterfaces); ok {
		return x.GetNetworkInterfaces
	}
	return nil
}

func (x *Request) GetGetPing() *GetPingRequest {
	if x, ok := x.GetRequest().(*Request_GetPing); ok {
		return x.GetPing
	}
	return nil
}

func (x *Request) GetPingHost() *PingHostRequest {
	if x, ok := x.GetRequest().(*Request_PingHost); ok {
		return x.PingHost
	}
	return nil
}

func (x *Request) GetGetStatus() *GetStatusRequest {
	if x, ok := x.GetRequest().(*Request_GetStatus); ok {
		return x.GetStatus
	}
	return nil
}

func (x *Request) GetReboot() *RebootRequest {
	if x, ok := x.GetRequest().(*Request_Reboot); ok {
		return x.Reboot
	}
	return nil
}

func (x *Request) GetSetSku() *SetSkuRequest {
	if x, ok := x.GetRequest().(*Request_SetSku); ok {
		return x.SetSku
	}
	return nil
}

func (x *Request) GetSetTrustedKeys() *SetTrustedKeysRequest {
	if x, ok := x.GetRequest().(*Request_SetTrustedKeys); ok {
		return x.SetTrustedKeys
	}
	return nil
}

func (x *Request) GetSpeedTest() *SpeedTestRequest {
	if x, ok := x.GetRequest().(*Request_SpeedTest); ok {
		return x.SpeedTest
	}
	return nil
}

func (x *Request) GetUpdate() *UpdateRequest {
	if x, ok := x.GetRequest().(*Request_Update); ok {
		return x.Update
	}
	return nil
}

func (x *Request) GetDishStow() *DishStowRequest {
	if x, ok := x.GetRequest().(*Request_DishStow); ok {
		return x.DishStow
	}
	return nil
}

func (x *Request) GetTransceiverIfLoopbackTest() *TransceiverIFLoopbackTestRequest {
	if x, ok := x.GetRequest().(*Request_TransceiverIfLoopbackTest); ok {
		return x.TransceiverIfLoopbackTest
	}
	return nil
}

func (x *Request) GetTransceiverGetStatus() *TransceiverGetStatusRequest {
	if x, ok := x.GetRequest().(*Request_TransceiverGetStatus); ok {
		return x.TransceiverGetStatus
	}
	return nil
}

func (x *Request) GetWifiGetClients() *WifiGetClientsRequest {
	if x, ok := x.GetRequest().(*Request_WifiGetClients); ok {
		return x.WifiGetClients
	}
	return nil
}

func (x *Request) GetWifiGetPingMetrics() *WifiGetPingMetricsRequest {
	if x, ok := x.GetRequest().(*Request_WifiGetPingMetrics); ok {
		return x.WifiGetPingMetrics
	}
	return nil
}

func (x *Request) GetWifiSetConfig() *WifiSetConfigRequest {
	if x, ok := x.GetRequest().(*Request_WifiSetConfig); ok {
		return x.WifiSetConfig
	}
	return nil
}

func (x *Request) GetWifiSetup() *WifiSetupRequest {
	if x, ok := x.GetRequest().(*Request_WifiSetup); ok {
		return x.WifiSetup
	}
	return nil
}

type isRequest_Request interface {
	isRequest_Request()
}

type Request_SignedRequest struct {
	SignedRequest *SignedData `protobuf:"bytes,15,opt,name=signed_request,json=signedRequest,proto3,oneof"`
}

type Request_GetNextId struct {
	GetNextId *GetNextIdRequest `protobuf:"bytes,1006,opt,name=get_next_id,json=getNextId,proto3,oneof"`
}

type Request_Authenticate struct {
	Authenticate *AuthenticateRequest `protobuf:"bytes,1005,opt,name=authenticate,proto3,oneof"`
}

type Request_FactoryReset struct {
	FactoryReset *FactoryResetRequest `protobuf:"bytes,1011,opt,name=factory_reset,json=factoryReset,proto3,oneof"`
}

type Request_GetDeviceInfo struct {
	GetDeviceInfo *GetDeviceInfoRequest `protobuf:"bytes,1008,opt,name=get_device_info,json=getDeviceInfo,proto3,oneof"`
}

type Request_GetHistory struct {
	GetHistory *GetHistoryRequest `protobuf:"bytes,1007,opt,name=get_history,json=getHistory,proto3,oneof"`
}

type Request_GetLog struct {
	GetLog *GetLogRequest `protobuf:"bytes,1012,opt,name=get_log,json=getLog,proto3,oneof"`
}

type Request_GetNetworkInterfaces struct {
	GetNetworkInterfaces *GetNetworkInterfacesRequest `protobuf:"bytes,1015,opt,name=get_network_interfaces,json=getNetworkInterfaces,proto3,oneof"`
}

type Request_GetPing struct {
	GetPing *GetPingRequest `protobuf:"bytes,1009,opt,name=get_ping,json=getPing,proto3,oneof"`
}

type Request_PingHost struct {
	PingHost *PingHostRequest `protobuf:"bytes,1016,opt,name=ping_host,json=pingHost,proto3,oneof"`
}

type Request_GetStatus struct {
	GetStatus *GetStatusRequest `protobuf:"bytes,1004,opt,name=get_status,json=getStatus,proto3,oneof"`
}

type Request_Reboot struct {
	Reboot *RebootRequest `protobuf:"bytes,1001,opt,name=reboot,proto3,oneof"`
}

type Request_SetSku struct {
	SetSku *SetSkuRequest `protobuf:"bytes,1013,opt,name=set_sku,json=setSku,proto3,oneof"`
}

type Request_SetTrustedKeys struct {
	SetTrustedKeys *SetTrustedKeysRequest `protobuf:"bytes,1010,opt,name=set_trusted_keys,json=setTrustedKeys,proto3,oneof"`
}

type Request_SpeedTest struct {
	SpeedTest *SpeedTestRequest `protobuf:"bytes,1003,opt,name=speed_test,json=speedTest,proto3,oneof"`
}

type Request_Update struct {
	Update *UpdateRequest `protobuf:"bytes,1014,opt,name=update,proto3,oneof"`
}

type Request_DishStow struct {
	DishStow *DishStowRequest `protobuf:"bytes,2002,opt,name=dish_stow,json=dishStow,proto3,oneof"`
}

type Request_TransceiverIfLoopbackTest struct {
	TransceiverIfLoopbackTest *TransceiverIFLoopbackTestRequest `protobuf:"bytes,4001,opt,name=transceiver_if_loopback_test,json=transceiverIfLoopbackTest,proto3,oneof"`
}

type Request_TransceiverGetStatus struct {
	TransceiverGetStatus *TransceiverGetStatusRequest `protobuf:"bytes,4003,opt,name=transceiver_get_status,json=transceiverGetStatus,proto3,oneof"`
}

type Request_WifiGetClients struct {
	WifiGetClients *WifiGetClientsRequest `protobuf:"bytes,3002,opt,name=wifi_get_clients,json=wifiGetClients,proto3,oneof"`
}

type Request_WifiGetPingMetrics struct {
	WifiGetPingMetrics *WifiGetPingMetricsRequest `protobuf:"bytes,3007,opt,name=wifi_get_ping_metrics,json=wifiGetPingMetrics,proto3,oneof"`
}

type Request_WifiSetConfig struct {
	WifiSetConfig *WifiSetConfigRequest `protobuf:"bytes,3001,opt,name=wifi_set_config,json=wifiSetConfig,proto3,oneof"`
}

type Request_WifiSetup struct {
	WifiSetup *WifiSetupRequest `protobuf:"bytes,3003,opt,name=wifi_setup,json=wifiSetup,proto3,oneof"`
}

func (*Request_SignedRequest) isRequest_Request() {}

func (*Request_GetNextId) isRequest_Request() {}

func (*Request_Authenticate) isRequest_Request() {}

func (*Request_FactoryReset) isRequest_Request() {}

func (*Request_GetDeviceInfo) isRequest_Request() {}

func (*Request_GetHistory) isRequest_Request() {}

func (*Request_GetLog) isRequest_Request() {}

func (*Request_GetNetworkInterfaces) isRequest_Request() {}

func (*Request_GetPing) isRequest_Request() {}

func (*Request_PingHost) isRequest_Request() {}

func (*Request_GetStatus) isRequest_Request() {}

func (*Request_Reboot) isRequest_Request() {}

func (*Request_SetSku) isRequest_Request() {}

func (*Request_SetTrustedKeys) isRequest_Request() {}

func (*Request_SpeedTest) isRequest_Request() {}

func (*Request_Update) isRequest_Request() {}

func (*Request_DishStow) isRequest_Request() {}

func (*Request_TransceiverIfLoopbackTest) isRequest_Request() {}

func (*Request_TransceiverGetStatus) isRequest_Request() {}

func (*Request_WifiGetClients) isRequest_Request() {}

func (*Request_WifiGetPingMetrics) isRequest_Request() {}

func (*Request_WifiSetConfig) isRequest_Request() {}

func (*Request_WifiSetup) isRequest_Request() {}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to Response:
	//	*Response_GetNextId
	//	*Response_FactoryReset
	//	*Response_GetDeviceInfo
	//	*Response_GetLog
	//	*Response_GetNetworkInterfaces
	//	*Response_GetPing
	//	*Response_PingHost
	//	*Response_Reboot
	//	*Response_SpeedTest
	//	*Response_SetSku
	//	*Response_SetTrustedKeys
	//	*Response_Update
	//	*Response_DishAuthenticate
	//	*Response_DishGetHistory
	//	*Response_DishGetStatus
	//	*Response_DishStow
	//	*Response_TransceiverIfLoopbackTest
	//	*Response_TransceiverGetStatus
	//	*Response_WifiAuthenticate
	//	*Response_WifiGetClients
	//	*Response_WifiGetHistory
	//	*Response_WifiGetPingMetrics
	//	*Response_WifiGetStatus
	//	*Response_WifiSetConfig
	//	*Response_WifiSetup
	Response isResponse_Response `protobuf_oneof:"response"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Response) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *Response) GetGetNextId() *GetNextIdResponse {
	if x, ok := x.GetResponse().(*Response_GetNextId); ok {
		return x.GetNextId
	}
	return nil
}

func (x *Response) GetFactoryReset() *FactoryResetResponse {
	if x, ok := x.GetResponse().(*Response_FactoryReset); ok {
		return x.FactoryReset
	}
	return nil
}

func (x *Response) GetGetDeviceInfo() *GetDeviceInfoResponse {
	if x, ok := x.GetResponse().(*Response_GetDeviceInfo); ok {
		return x.GetDeviceInfo
	}
	return nil
}

func (x *Response) GetGetLog() *GetLogResponse {
	if x, ok := x.GetResponse().(*Response_GetLog); ok {
		return x.GetLog
	}
	return nil
}

func (x *Response) GetGetNetworkInterfaces() *GetNetworkInterfacesResponse {
	if x, ok := x.GetResponse().(*Response_GetNetworkInterfaces); ok {
		return x.GetNetworkInterfaces
	}
	return nil
}

func (x *Response) GetGetPing() *GetPingResponse {
	if x, ok := x.GetResponse().(*Response_GetPing); ok {
		return x.GetPing
	}
	return nil
}

func (x *Response) GetPingHost() *PingHostResponse {
	if x, ok := x.GetResponse().(*Response_PingHost); ok {
		return x.PingHost
	}
	return nil
}

func (x *Response) GetReboot() *RebootResponse {
	if x, ok := x.GetResponse().(*Response_Reboot); ok {
		return x.Reboot
	}
	return nil
}

func (x *Response) GetSpeedTest() *SpeedTestResponse {
	if x, ok := x.GetResponse().(*Response_SpeedTest); ok {
		return x.SpeedTest
	}
	return nil
}

func (x *Response) GetSetSku() *SetSkuResponse {
	if x, ok := x.GetResponse().(*Response_SetSku); ok {
		return x.SetSku
	}
	return nil
}

func (x *Response) GetSetTrustedKeys() *SetTrustedKeysResponse {
	if x, ok := x.GetResponse().(*Response_SetTrustedKeys); ok {
		return x.SetTrustedKeys
	}
	return nil
}

func (x *Response) GetUpdate() *UpdateResponse {
	if x, ok := x.GetResponse().(*Response_Update); ok {
		return x.Update
	}
	return nil
}

func (x *Response) GetDishAuthenticate() *DishAuthenticateResponse {
	if x, ok := x.GetResponse().(*Response_DishAuthenticate); ok {
		return x.DishAuthenticate
	}
	return nil
}

func (x *Response) GetDishGetHistory() *DishGetHistoryResponse {
	if x, ok := x.GetResponse().(*Response_DishGetHistory); ok {
		return x.DishGetHistory
	}
	return nil
}

func (x *Response) GetDishGetStatus() *DishGetStatusResponse {
	if x, ok := x.GetResponse().(*Response_DishGetStatus); ok {
		return x.DishGetStatus
	}
	return nil
}

func (x *Response) GetDishStow() *DishStowResponse {
	if x, ok := x.GetResponse().(*Response_DishStow); ok {
		return x.DishStow
	}
	return nil
}

func (x *Response) GetTransceiverIfLoopbackTest() *TransceiverIFLoopbackTestResponse {
	if x, ok := x.GetResponse().(*Response_TransceiverIfLoopbackTest); ok {
		return x.TransceiverIfLoopbackTest
	}
	return nil
}

func (x *Response) GetTransceiverGetStatus() *TransceiverGetStatusResponse {
	if x, ok := x.GetResponse().(*Response_TransceiverGetStatus); ok {
		return x.TransceiverGetStatus
	}
	return nil
}

func (x *Response) GetWifiAuthenticate() *WifiAuthenticateResponse {
	if x, ok := x.GetResponse().(*Response_WifiAuthenticate); ok {
		return x.WifiAuthenticate
	}
	return nil
}

func (x *Response) GetWifiGetClients() *WifiGetClientsResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetClients); ok {
		return x.WifiGetClients
	}
	return nil
}

func (x *Response) GetWifiGetHistory() *WifiGetHistoryResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetHistory); ok {
		return x.WifiGetHistory
	}
	return nil
}

func (x *Response) GetWifiGetPingMetrics() *WifiGetPingMetricsResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetPingMetrics); ok {
		return x.WifiGetPingMetrics
	}
	return nil
}

func (x *Response) GetWifiGetStatus() *WifiGetStatusResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetStatus); ok {
		return x.WifiGetStatus
	}
	return nil
}

func (x *Response) GetWifiSetConfig() *WifiSetConfigResponse {
	if x, ok := x.GetResponse().(*Response_WifiSetConfig); ok {
		return x.WifiSetConfig
	}
	return nil
}

func (x *Response) GetWifiSetup() *WifiSetupResponse {
	if x, ok := x.GetResponse().(*Response_WifiSetup); ok {
		return x.WifiSetup
	}
	return nil
}

type isResponse_Response interface {
	isResponse_Response()
}

type Response_GetNextId struct {
	GetNextId *GetNextIdResponse `protobuf:"bytes,1006,opt,name=get_next_id,json=getNextId,proto3,oneof"`
}

type Response_FactoryReset struct {
	FactoryReset *FactoryResetResponse `protobuf:"bytes,1011,opt,name=factory_reset,json=factoryReset,proto3,oneof"`
}

type Response_GetDeviceInfo struct {
	GetDeviceInfo *GetDeviceInfoResponse `protobuf:"bytes,1004,opt,name=get_device_info,json=getDeviceInfo,proto3,oneof"`
}

type Response_GetLog struct {
	GetLog *GetLogResponse `protobuf:"bytes,1012,opt,name=get_log,json=getLog,proto3,oneof"`
}

type Response_GetNetworkInterfaces struct {
	GetNetworkInterfaces *GetNetworkInterfacesResponse `protobuf:"bytes,1015,opt,name=get_network_interfaces,json=getNetworkInterfaces,proto3,oneof"`
}

type Response_GetPing struct {
	GetPing *GetPingResponse `protobuf:"bytes,1009,opt,name=get_ping,json=getPing,proto3,oneof"`
}

type Response_PingHost struct {
	PingHost *PingHostResponse `protobuf:"bytes,1016,opt,name=ping_host,json=pingHost,proto3,oneof"`
}

type Response_Reboot struct {
	Reboot *RebootResponse `protobuf:"bytes,1001,opt,name=reboot,proto3,oneof"`
}

type Response_SpeedTest struct {
	SpeedTest *SpeedTestResponse `protobuf:"bytes,1003,opt,name=speed_test,json=speedTest,proto3,oneof"`
}

type Response_SetSku struct {
	SetSku *SetSkuResponse `protobuf:"bytes,1013,opt,name=set_sku,json=setSku,proto3,oneof"`
}

type Response_SetTrustedKeys struct {
	SetTrustedKeys *SetTrustedKeysResponse `protobuf:"bytes,1010,opt,name=set_trusted_keys,json=setTrustedKeys,proto3,oneof"`
}

type Response_Update struct {
	Update *UpdateResponse `protobuf:"bytes,1014,opt,name=update,proto3,oneof"`
}

type Response_DishAuthenticate struct {
	DishAuthenticate *DishAuthenticateResponse `protobuf:"bytes,2005,opt,name=dish_authenticate,json=dishAuthenticate,proto3,oneof"`
}

type Response_DishGetHistory struct {
	DishGetHistory *DishGetHistoryResponse `protobuf:"bytes,2006,opt,name=dish_get_history,json=dishGetHistory,proto3,oneof"`
}

type Response_DishGetStatus struct {
	DishGetStatus *DishGetStatusResponse `protobuf:"bytes,2004,opt,name=dish_get_status,json=dishGetStatus,proto3,oneof"`
}

type Response_DishStow struct {
	DishStow *DishStowResponse `protobuf:"bytes,2002,opt,name=dish_stow,json=dishStow,proto3,oneof"`
}

type Response_TransceiverIfLoopbackTest struct {
	TransceiverIfLoopbackTest *TransceiverIFLoopbackTestResponse `protobuf:"bytes,4001,opt,name=transceiver_if_loopback_test,json=transceiverIfLoopbackTest,proto3,oneof"`
}

type Response_TransceiverGetStatus struct {
	TransceiverGetStatus *TransceiverGetStatusResponse `protobuf:"bytes,4003,opt,name=transceiver_get_status,json=transceiverGetStatus,proto3,oneof"`
}

type Response_WifiAuthenticate struct {
	WifiAuthenticate *WifiAuthenticateResponse `protobuf:"bytes,3005,opt,name=wifi_authenticate,json=wifiAuthenticate,proto3,oneof"`
}

type Response_WifiGetClients struct {
	WifiGetClients *WifiGetClientsResponse `protobuf:"bytes,3002,opt,name=wifi_get_clients,json=wifiGetClients,proto3,oneof"`
}

type Response_WifiGetHistory struct {
	WifiGetHistory *WifiGetHistoryResponse `protobuf:"bytes,3006,opt,name=wifi_get_history,json=wifiGetHistory,proto3,oneof"`
}

type Response_WifiGetPingMetrics struct {
	WifiGetPingMetrics *WifiGetPingMetricsResponse `protobuf:"bytes,3007,opt,name=wifi_get_ping_metrics,json=wifiGetPingMetrics,proto3,oneof"`
}

type Response_WifiGetStatus struct {
	WifiGetStatus *WifiGetStatusResponse `protobuf:"bytes,3004,opt,name=wifi_get_status,json=wifiGetStatus,proto3,oneof"`
}

type Response_WifiSetConfig struct {
	WifiSetConfig *WifiSetConfigResponse `protobuf:"bytes,3001,opt,name=wifi_set_config,json=wifiSetConfig,proto3,oneof"`
}

type Response_WifiSetup struct {
	WifiSetup *WifiSetupResponse `protobuf:"bytes,3003,opt,name=wifi_setup,json=wifiSetup,proto3,oneof"`
}

func (*Response_GetNextId) isResponse_Response() {}

func (*Response_FactoryReset) isResponse_Response() {}

func (*Response_GetDeviceInfo) isResponse_Response() {}

func (*Response_GetLog) isResponse_Response() {}

func (*Response_GetNetworkInterfaces) isResponse_Response() {}

func (*Response_GetPing) isResponse_Response() {}

func (*Response_PingHost) isResponse_Response() {}

func (*Response_Reboot) isResponse_Response() {}

func (*Response_SpeedTest) isResponse_Response() {}

func (*Response_SetSku) isResponse_Response() {}

func (*Response_SetTrustedKeys) isResponse_Response() {}

func (*Response_Update) isResponse_Response() {}

func (*Response_DishAuthenticate) isResponse_Response() {}

func (*Response_DishGetHistory) isResponse_Response() {}

func (*Response_DishGetStatus) isResponse_Response() {}

func (*Response_DishStow) isResponse_Response() {}

func (*Response_TransceiverIfLoopbackTest) isResponse_Response() {}

func (*Response_TransceiverGetStatus) isResponse_Response() {}

func (*Response_WifiAuthenticate) isResponse_Response() {}

func (*Response_WifiGetClients) isResponse_Response() {}

func (*Response_WifiGetHistory) isResponse_Response() {}

func (*Response_WifiGetPingMetrics) isResponse_Response() {}

func (*Response_WifiGetStatus) isResponse_Response() {}

func (*Response_WifiSetConfig) isResponse_Response() {}

func (*Response_WifiSetup) isResponse_Response() {}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*Event_WifiNewClientConnected
	//	*Event_WifiAccountBonding
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{4}
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetWifiNewClientConnected() *WifiNewClientConnectedEvent {
	if x, ok := x.GetEvent().(*Event_WifiNewClientConnected); ok {
		return x.WifiNewClientConnected
	}
	return nil
}

func (x *Event) GetWifiAccountBonding() *WifiAccountBondingEvent {
	if x, ok := x.GetEvent().(*Event_WifiAccountBonding); ok {
		return x.WifiAccountBonding
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_WifiNewClientConnected struct {
	WifiNewClientConnected *WifiNewClientConnectedEvent `protobuf:"bytes,3001,opt,name=wifi_new_client_connected,json=wifiNewClientConnected,proto3,oneof"`
}

type Event_WifiAccountBonding struct {
	WifiAccountBonding *WifiAccountBondingEvent `protobuf:"bytes,3002,opt,name=wifi_account_bonding,json=wifiAccountBonding,proto3,oneof"`
}

func (*Event_WifiNewClientConnected) isEvent_Event() {}

func (*Event_WifiAccountBonding) isEvent_Event() {}

type FactoryResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FactoryResetRequest) Reset() {
	*x = FactoryResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoryResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoryResetRequest) ProtoMessage() {}

func (x *FactoryResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoryResetRequest.ProtoReflect.Descriptor instead.
func (*FactoryResetRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{5}
}

type FactoryResetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FactoryResetResponse) Reset() {
	*x = FactoryResetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoryResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoryResetResponse) ProtoMessage() {}

func (x *FactoryResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoryResetResponse.ProtoReflect.Descriptor instead.
func (*FactoryResetResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{6}
}

type GetHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHistoryRequest) Reset() {
	*x = GetHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryRequest) ProtoMessage() {}

func (x *GetHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{7}
}

type GetLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLogRequest) Reset() {
	*x = GetLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogRequest) ProtoMessage() {}

func (x *GetLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogRequest.ProtoReflect.Descriptor instead.
func (*GetLogRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{8}
}

type GetLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Syslog     string `protobuf:"bytes,1,opt,name=syslog,proto3" json:"syslog,omitempty"`
	OfflineLog string `protobuf:"bytes,2,opt,name=offline_log,json=offlineLog,proto3" json:"offline_log,omitempty"`
}

func (x *GetLogResponse) Reset() {
	*x = GetLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogResponse) ProtoMessage() {}

func (x *GetLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogResponse.ProtoReflect.Descriptor instead.
func (*GetLogResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{9}
}

func (x *GetLogResponse) GetSyslog() string {
	if x != nil {
		return x.Syslog
	}
	return ""
}

func (x *GetLogResponse) GetOfflineLog() string {
	if x != nil {
		return x.OfflineLog
	}
	return ""
}

type GetPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPingRequest) Reset() {
	*x = GetPingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPingRequest) ProtoMessage() {}

func (x *GetPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPingRequest.ProtoReflect.Descriptor instead.
func (*GetPingRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{10}
}

type GetPingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*PingResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPingResponse) Reset() {
	*x = GetPingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPingResponse) ProtoMessage() {}

func (x *GetPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPingResponse.ProtoReflect.Descriptor instead.
func (*GetPingResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{11}
}

func (x *GetPingResponse) GetResults() map[string]*PingResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type PingHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *PingHostRequest) Reset() {
	*x = PingHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingHostRequest) ProtoMessage() {}

func (x *PingHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingHostRequest.ProtoReflect.Descriptor instead.
func (*PingHostRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{12}
}

func (x *PingHostRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type PingHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *PingResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PingHostResponse) Reset() {
	*x = PingHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingHostResponse) ProtoMessage() {}

func (x *PingHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingHostResponse.ProtoReflect.Descriptor instead.
func (*PingHostResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{13}
}

func (x *PingHostResponse) GetResult() *PingResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{14}
}

type RebootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebootRequest) Reset() {
	*x = RebootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootRequest) ProtoMessage() {}

func (x *RebootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootRequest.ProtoReflect.Descriptor instead.
func (*RebootRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{15}
}

type RebootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebootResponse) Reset() {
	*x = RebootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootResponse) ProtoMessage() {}

func (x *RebootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootResponse.ProtoReflect.Descriptor instead.
func (*RebootResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{16}
}

type SpeedTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpeedTestRequest) Reset() {
	*x = SpeedTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedTestRequest) ProtoMessage() {}

func (x *SpeedTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedTestRequest.ProtoReflect.Descriptor instead.
func (*SpeedTestRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{17}
}

type SpeedTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadBps float32 `protobuf:"fixed32,1,opt,name=download_bps,json=downloadBps,proto3" json:"download_bps,omitempty"`
	UploadBps   float32 `protobuf:"fixed32,2,opt,name=upload_bps,json=uploadBps,proto3" json:"upload_bps,omitempty"`
	LatencyS    float32 `protobuf:"fixed32,3,opt,name=latency_s,json=latencyS,proto3" json:"latency_s,omitempty"`
}

func (x *SpeedTestResponse) Reset() {
	*x = SpeedTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedTestResponse) ProtoMessage() {}

func (x *SpeedTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedTestResponse.ProtoReflect.Descriptor instead.
func (*SpeedTestResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{18}
}

func (x *SpeedTestResponse) GetDownloadBps() float32 {
	if x != nil {
		return x.DownloadBps
	}
	return 0
}

func (x *SpeedTestResponse) GetUploadBps() float32 {
	if x != nil {
		return x.UploadBps
	}
	return 0
}

func (x *SpeedTestResponse) GetLatencyS() float32 {
	if x != nil {
		return x.LatencyS
	}
	return 0
}

type GetDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDeviceInfoRequest) Reset() {
	*x = GetDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfoRequest) ProtoMessage() {}

func (x *GetDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{19}
}

type GetDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInfo *DeviceInfo `protobuf:"bytes,1,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
}

func (x *GetDeviceInfoResponse) Reset() {
	*x = GetDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfoResponse) ProtoMessage() {}

func (x *GetDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{20}
}

func (x *GetDeviceInfoResponse) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

type SetTrustedKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*PublicKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SetTrustedKeysRequest) Reset() {
	*x = SetTrustedKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrustedKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrustedKeysRequest) ProtoMessage() {}

func (x *SetTrustedKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrustedKeysRequest.ProtoReflect.Descriptor instead.
func (*SetTrustedKeysRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{21}
}

func (x *SetTrustedKeysRequest) GetKeys() []*PublicKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type SetTrustedKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTrustedKeysResponse) Reset() {
	*x = SetTrustedKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrustedKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrustedKeysResponse) ProtoMessage() {}

func (x *SetTrustedKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrustedKeysResponse.ProtoReflect.Descriptor instead.
func (*SetTrustedKeysResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{22}
}

type SetSkuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku              string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	CountryCode      string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	ApplyCountryCode bool   `protobuf:"varint,4,opt,name=apply_country_code,json=applyCountryCode,proto3" json:"apply_country_code,omitempty"`
}

func (x *SetSkuRequest) Reset() {
	*x = SetSkuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkuRequest) ProtoMessage() {}

func (x *SetSkuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkuRequest.ProtoReflect.Descriptor instead.
func (*SetSkuRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{23}
}

func (x *SetSkuRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *SetSkuRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SetSkuRequest) GetApplyCountryCode() bool {
	if x != nil {
		return x.ApplyCountryCode
	}
	return false
}

type SetSkuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSkuResponse) Reset() {
	*x = SetSkuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkuResponse) ProtoMessage() {}

func (x *SetSkuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkuResponse.ProtoReflect.Descriptor instead.
func (*SetSkuResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{24}
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{25}
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{26}
}

type GetNetworkInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNetworkInterfacesRequest) Reset() {
	*x = GetNetworkInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkInterfacesRequest) ProtoMessage() {}

func (x *GetNetworkInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkInterfacesRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{27}
}

type GetNetworkInterfacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkInterfaces []*NetworkInterface `protobuf:"bytes,1006,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
}

func (x *GetNetworkInterfacesResponse) Reset() {
	*x = GetNetworkInterfacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkInterfacesResponse) ProtoMessage() {}

func (x *GetNetworkInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkInterfacesResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{28}
}

func (x *GetNetworkInterfacesResponse) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

var File_spacex_api_device_device_proto protoreflect.FileDescriptor

var file_spacex_api_device_device_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x25, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x69, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x08,
	0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0a,
	0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xee, 0x0e, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xee, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0xf4,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x12, 0x67, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xf7, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xec, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0xf5,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x53, 0x6b,
	0x75, 0x12, 0x55, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x64, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x77, 0x18, 0xd2, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x77,
	0x12, 0x77, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x66, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x18, 0xa1, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x46, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63,
	0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x66, 0x4c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0xa3, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xba, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69, 0x66, 0x69, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x77, 0x69, 0x66,
	0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0xbf, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x66, 0x69, 0x47,
	0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x52, 0x0a,
	0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x45, 0x0a, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18,
	0xbb, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77,
	0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x75, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xea, 0x10, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0d,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0xf3, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x53, 0x0a,
	0x0f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0xf4, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x12, 0x68, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xf7, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a,
	0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0xe9, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x12, 0x46, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x6b, 0x75, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x12, 0x56, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0xf2, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0xd5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x73, 0x68, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x68, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xd6,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x47, 0x65,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x53, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x68, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x6f, 0x77, 0x18, 0xd2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x77, 0x12, 0x78, 0x0a, 0x1c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0xa1, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x46, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x66, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0xa3, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x5b, 0x0a, 0x11, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0xbd, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x77, 0x69, 0x66,
	0x69, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a,
	0x10, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0xba, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x10, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xbe, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x77,
	0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x63, 0x0a,
	0x15, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0xbf, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x77, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xbc, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x77,
	0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0a,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0xbb, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x77, 0x69, 0x66, 0x69, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xdf, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x19, 0x77, 0x69,
	0x66, 0x69, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x16, 0x77, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x14, 0x77, 0x69, 0x66, 0x69,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0xba, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x66, 0x69, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4c,
	0x6f, 0x67, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0x59, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b,
	0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x49, 0x0a, 0x10, 0x50,
	0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x52,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a,
	0x10, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x72, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x49, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x0d, 0x53,
	0x65, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x10, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xee, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x32, 0x95, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1d, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a,
	0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x17, 0x5a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_spacex_api_device_device_proto_rawDescOnce sync.Once
	file_spacex_api_device_device_proto_rawDescData = file_spacex_api_device_device_proto_rawDesc
)

func file_spacex_api_device_device_proto_rawDescGZIP() []byte {
	file_spacex_api_device_device_proto_rawDescOnce.Do(func() {
		file_spacex_api_device_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacex_api_device_device_proto_rawDescData)
	})
	return file_spacex_api_device_device_proto_rawDescData
}

var file_spacex_api_device_device_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_spacex_api_device_device_proto_goTypes = []interface{}{
	(*ToDevice)(nil),                          // 0: SpaceX.API.Device.ToDevice
	(*FromDevice)(nil),                        // 1: SpaceX.API.Device.FromDevice
	(*Request)(nil),                           // 2: SpaceX.API.Device.Request
	(*Response)(nil),                          // 3: SpaceX.API.Device.Response
	(*Event)(nil),                             // 4: SpaceX.API.Device.Event
	(*FactoryResetRequest)(nil),               // 5: SpaceX.API.Device.FactoryResetRequest
	(*FactoryResetResponse)(nil),              // 6: SpaceX.API.Device.FactoryResetResponse
	(*GetHistoryRequest)(nil),                 // 7: SpaceX.API.Device.GetHistoryRequest
	(*GetLogRequest)(nil),                     // 8: SpaceX.API.Device.GetLogRequest
	(*GetLogResponse)(nil),                    // 9: SpaceX.API.Device.GetLogResponse
	(*GetPingRequest)(nil),                    // 10: SpaceX.API.Device.GetPingRequest
	(*GetPingResponse)(nil),                   // 11: SpaceX.API.Device.GetPingResponse
	(*PingHostRequest)(nil),                   // 12: SpaceX.API.Device.PingHostRequest
	(*PingHostResponse)(nil),                  // 13: SpaceX.API.Device.PingHostResponse
	(*GetStatusRequest)(nil),                  // 14: SpaceX.API.Device.GetStatusRequest
	(*RebootRequest)(nil),                     // 15: SpaceX.API.Device.RebootRequest
	(*RebootResponse)(nil),                    // 16: SpaceX.API.Device.RebootResponse
	(*SpeedTestRequest)(nil),                  // 17: SpaceX.API.Device.SpeedTestRequest
	(*SpeedTestResponse)(nil),                 // 18: SpaceX.API.Device.SpeedTestResponse
	(*GetDeviceInfoRequest)(nil),              // 19: SpaceX.API.Device.GetDeviceInfoRequest
	(*GetDeviceInfoResponse)(nil),             // 20: SpaceX.API.Device.GetDeviceInfoResponse
	(*SetTrustedKeysRequest)(nil),             // 21: SpaceX.API.Device.SetTrustedKeysRequest
	(*SetTrustedKeysResponse)(nil),            // 22: SpaceX.API.Device.SetTrustedKeysResponse
	(*SetSkuRequest)(nil),                     // 23: SpaceX.API.Device.SetSkuRequest
	(*SetSkuResponse)(nil),                    // 24: SpaceX.API.Device.SetSkuResponse
	(*UpdateRequest)(nil),                     // 25: SpaceX.API.Device.UpdateRequest
	(*UpdateResponse)(nil),                    // 26: SpaceX.API.Device.UpdateResponse
	(*GetNetworkInterfacesRequest)(nil),       // 27: SpaceX.API.Device.GetNetworkInterfacesRequest
	(*GetNetworkInterfacesResponse)(nil),      // 28: SpaceX.API.Device.GetNetworkInterfacesResponse
	nil,                                       // 29: SpaceX.API.Device.GetPingResponse.ResultsEntry
	(*SignedData)(nil),                        // 30: SpaceX.API.Device.SignedData
	(*GetNextIdRequest)(nil),                  // 31: SpaceX.API.Device.GetNextIdRequest
	(*AuthenticateRequest)(nil),               // 32: SpaceX.API.Device.AuthenticateRequest
	(*DishStowRequest)(nil),                   // 33: SpaceX.API.Device.DishStowRequest
	(*TransceiverIFLoopbackTestRequest)(nil),  // 34: SpaceX.API.Device.TransceiverIFLoopbackTestRequest
	(*TransceiverGetStatusRequest)(nil),       // 35: SpaceX.API.Device.TransceiverGetStatusRequest
	(*WifiGetClientsRequest)(nil),             // 36: SpaceX.API.Device.WifiGetClientsRequest
	(*WifiGetPingMetricsRequest)(nil),         // 37: SpaceX.API.Device.WifiGetPingMetricsRequest
	(*WifiSetConfigRequest)(nil),              // 38: SpaceX.API.Device.WifiSetConfigRequest
	(*WifiSetupRequest)(nil),                  // 39: SpaceX.API.Device.WifiSetupRequest
	(*status.Status)(nil),                     // 40: SpaceX.API.Status.Status
	(*GetNextIdResponse)(nil),                 // 41: SpaceX.API.Device.GetNextIdResponse
	(*DishAuthenticateResponse)(nil),          // 42: SpaceX.API.Device.DishAuthenticateResponse
	(*DishGetHistoryResponse)(nil),            // 43: SpaceX.API.Device.DishGetHistoryResponse
	(*DishGetStatusResponse)(nil),             // 44: SpaceX.API.Device.DishGetStatusResponse
	(*DishStowResponse)(nil),                  // 45: SpaceX.API.Device.DishStowResponse
	(*TransceiverIFLoopbackTestResponse)(nil), // 46: SpaceX.API.Device.TransceiverIFLoopbackTestResponse
	(*TransceiverGetStatusResponse)(nil),      // 47: SpaceX.API.Device.TransceiverGetStatusResponse
	(*WifiAuthenticateResponse)(nil),          // 48: SpaceX.API.Device.WifiAuthenticateResponse
	(*WifiGetClientsResponse)(nil),            // 49: SpaceX.API.Device.WifiGetClientsResponse
	(*WifiGetHistoryResponse)(nil),            // 50: SpaceX.API.Device.WifiGetHistoryResponse
	(*WifiGetPingMetricsResponse)(nil),        // 51: SpaceX.API.Device.WifiGetPingMetricsResponse
	(*WifiGetStatusResponse)(nil),             // 52: SpaceX.API.Device.WifiGetStatusResponse
	(*WifiSetConfigResponse)(nil),             // 53: SpaceX.API.Device.WifiSetConfigResponse
	(*WifiSetupResponse)(nil),                 // 54: SpaceX.API.Device.WifiSetupResponse
	(*WifiNewClientConnectedEvent)(nil),       // 55: SpaceX.API.Device.WifiNewClientConnectedEvent
	(*WifiAccountBondingEvent)(nil),           // 56: SpaceX.API.Device.WifiAccountBondingEvent
	(*PingResult)(nil),                        // 57: SpaceX.API.Device.PingResult
	(*DeviceInfo)(nil),                        // 58: SpaceX.API.Device.DeviceInfo
	(*PublicKey)(nil),                         // 59: SpaceX.API.Device.PublicKey
	(*NetworkInterface)(nil),                  // 60: SpaceX.API.Device.NetworkInterface
}
var file_spacex_api_device_device_proto_depIdxs = []int32{
	2,  // 0: SpaceX.API.Device.ToDevice.request:type_name -> SpaceX.API.Device.Request
	3,  // 1: SpaceX.API.Device.FromDevice.response:type_name -> SpaceX.API.Device.Response
	4,  // 2: SpaceX.API.Device.FromDevice.event:type_name -> SpaceX.API.Device.Event
	30, // 3: SpaceX.API.Device.Request.signed_request:type_name -> SpaceX.API.Device.SignedData
	31, // 4: SpaceX.API.Device.Request.get_next_id:type_name -> SpaceX.API.Device.GetNextIdRequest
	32, // 5: SpaceX.API.Device.Request.authenticate:type_name -> SpaceX.API.Device.AuthenticateRequest
	5,  // 6: SpaceX.API.Device.Request.factory_reset:type_name -> SpaceX.API.Device.FactoryResetRequest
	19, // 7: SpaceX.API.Device.Request.get_device_info:type_name -> SpaceX.API.Device.GetDeviceInfoRequest
	7,  // 8: SpaceX.API.Device.Request.get_history:type_name -> SpaceX.API.Device.GetHistoryRequest
	8,  // 9: SpaceX.API.Device.Request.get_log:type_name -> SpaceX.API.Device.GetLogRequest
	27, // 10: SpaceX.API.Device.Request.get_network_interfaces:type_name -> SpaceX.API.Device.GetNetworkInterfacesRequest
	10, // 11: SpaceX.API.Device.Request.get_ping:type_name -> SpaceX.API.Device.GetPingRequest
	12, // 12: SpaceX.API.Device.Request.ping_host:type_name -> SpaceX.API.Device.PingHostRequest
	14, // 13: SpaceX.API.Device.Request.get_status:type_name -> SpaceX.API.Device.GetStatusRequest
	15, // 14: SpaceX.API.Device.Request.reboot:type_name -> SpaceX.API.Device.RebootRequest
	23, // 15: SpaceX.API.Device.Request.set_sku:type_name -> SpaceX.API.Device.SetSkuRequest
	21, // 16: SpaceX.API.Device.Request.set_trusted_keys:type_name -> SpaceX.API.Device.SetTrustedKeysRequest
	17, // 17: SpaceX.API.Device.Request.speed_test:type_name -> SpaceX.API.Device.SpeedTestRequest
	25, // 18: SpaceX.API.Device.Request.update:type_name -> SpaceX.API.Device.UpdateRequest
	33, // 19: SpaceX.API.Device.Request.dish_stow:type_name -> SpaceX.API.Device.DishStowRequest
	34, // 20: SpaceX.API.Device.Request.transceiver_if_loopback_test:type_name -> SpaceX.API.Device.TransceiverIFLoopbackTestRequest
	35, // 21: SpaceX.API.Device.Request.transceiver_get_status:type_name -> SpaceX.API.Device.TransceiverGetStatusRequest
	36, // 22: SpaceX.API.Device.Request.wifi_get_clients:type_name -> SpaceX.API.Device.WifiGetClientsRequest
	37, // 23: SpaceX.API.Device.Request.wifi_get_ping_metrics:type_name -> SpaceX.API.Device.WifiGetPingMetricsRequest
	38, // 24: SpaceX.API.Device.Request.wifi_set_config:type_name -> SpaceX.API.Device.WifiSetConfigRequest
	39, // 25: SpaceX.API.Device.Request.wifi_setup:type_name -> SpaceX.API.Device.WifiSetupRequest
	40, // 26: SpaceX.API.Device.Response.status:type_name -> SpaceX.API.Status.Status
	41, // 27: SpaceX.API.Device.Response.get_next_id:type_name -> SpaceX.API.Device.GetNextIdResponse
	6,  // 28: SpaceX.API.Device.Response.factory_reset:type_name -> SpaceX.API.Device.FactoryResetResponse
	20, // 29: SpaceX.API.Device.Response.get_device_info:type_name -> SpaceX.API.Device.GetDeviceInfoResponse
	9,  // 30: SpaceX.API.Device.Response.get_log:type_name -> SpaceX.API.Device.GetLogResponse
	28, // 31: SpaceX.API.Device.Response.get_network_interfaces:type_name -> SpaceX.API.Device.GetNetworkInterfacesResponse
	11, // 32: SpaceX.API.Device.Response.get_ping:type_name -> SpaceX.API.Device.GetPingResponse
	13, // 33: SpaceX.API.Device.Response.ping_host:type_name -> SpaceX.API.Device.PingHostResponse
	16, // 34: SpaceX.API.Device.Response.reboot:type_name -> SpaceX.API.Device.RebootResponse
	18, // 35: SpaceX.API.Device.Response.speed_test:type_name -> SpaceX.API.Device.SpeedTestResponse
	24, // 36: SpaceX.API.Device.Response.set_sku:type_name -> SpaceX.API.Device.SetSkuResponse
	22, // 37: SpaceX.API.Device.Response.set_trusted_keys:type_name -> SpaceX.API.Device.SetTrustedKeysResponse
	26, // 38: SpaceX.API.Device.Response.update:type_name -> SpaceX.API.Device.UpdateResponse
	42, // 39: SpaceX.API.Device.Response.dish_authenticate:type_name -> SpaceX.API.Device.DishAuthenticateResponse
	43, // 40: SpaceX.API.Device.Response.dish_get_history:type_name -> SpaceX.API.Device.DishGetHistoryResponse
	44, // 41: SpaceX.API.Device.Response.dish_get_status:type_name -> SpaceX.API.Device.DishGetStatusResponse
	45, // 42: SpaceX.API.Device.Response.dish_stow:type_name -> SpaceX.API.Device.DishStowResponse
	46, // 43: SpaceX.API.Device.Response.transceiver_if_loopback_test:type_name -> SpaceX.API.Device.TransceiverIFLoopbackTestResponse
	47, // 44: SpaceX.API.Device.Response.transceiver_get_status:type_name -> SpaceX.API.Device.TransceiverGetStatusResponse
	48, // 45: SpaceX.API.Device.Response.wifi_authenticate:type_name -> SpaceX.API.Device.WifiAuthenticateResponse
	49, // 46: SpaceX.API.Device.Response.wifi_get_clients:type_name -> SpaceX.API.Device.WifiGetClientsResponse
	50, // 47: SpaceX.API.Device.Response.wifi_get_history:type_name -> SpaceX.API.Device.WifiGetHistoryResponse
	51, // 48: SpaceX.API.Device.Response.wifi_get_ping_metrics:type_name -> SpaceX.API.Device.WifiGetPingMetricsResponse
	52, // 49: SpaceX.API.Device.Response.wifi_get_status:type_name -> SpaceX.API.Device.WifiGetStatusResponse
	53, // 50: SpaceX.API.Device.Response.wifi_set_config:type_name -> SpaceX.API.Device.WifiSetConfigResponse
	54, // 51: SpaceX.API.Device.Response.wifi_setup:type_name -> SpaceX.API.Device.WifiSetupResponse
	55, // 52: SpaceX.API.Device.Event.wifi_new_client_connected:type_name -> SpaceX.API.Device.WifiNewClientConnectedEvent
	56, // 53: SpaceX.API.Device.Event.wifi_account_bonding:type_name -> SpaceX.API.Device.WifiAccountBondingEvent
	29, // 54: SpaceX.API.Device.GetPingResponse.results:type_name -> SpaceX.API.Device.GetPingResponse.ResultsEntry
	57, // 55: SpaceX.API.Device.PingHostResponse.result:type_name -> SpaceX.API.Device.PingResult
	58, // 56: SpaceX.API.Device.GetDeviceInfoResponse.device_info:type_name -> SpaceX.API.Device.DeviceInfo
	59, // 57: SpaceX.API.Device.SetTrustedKeysRequest.keys:type_name -> SpaceX.API.Device.PublicKey
	60, // 58: SpaceX.API.Device.GetNetworkInterfacesResponse.network_interfaces:type_name -> SpaceX.API.Device.NetworkInterface
	57, // 59: SpaceX.API.Device.GetPingResponse.ResultsEntry.value:type_name -> SpaceX.API.Device.PingResult
	0,  // 60: SpaceX.API.Device.Device.Stream:input_type -> SpaceX.API.Device.ToDevice
	2,  // 61: SpaceX.API.Device.Device.Handle:input_type -> SpaceX.API.Device.Request
	1,  // 62: SpaceX.API.Device.Device.Stream:output_type -> SpaceX.API.Device.FromDevice
	3,  // 63: SpaceX.API.Device.Device.Handle:output_type -> SpaceX.API.Device.Response
	62, // [62:64] is the sub-list for method output_type
	60, // [60:62] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_spacex_api_device_device_proto_init() }
func file_spacex_api_device_device_proto_init() {
	if File_spacex_api_device_device_proto != nil {
		return
	}
	file_spacex_api_device_command_proto_init()
	file_spacex_api_device_common_proto_init()
	file_spacex_api_device_dish_proto_init()
	file_spacex_api_device_transceiver_proto_init()
	file_spacex_api_device_wifi_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spacex_api_device_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoryResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoryResetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTrustedKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTrustedKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkInterfacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spacex_api_device_device_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ToDevice_Request)(nil),
	}
	file_spacex_api_device_device_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FromDevice_Response)(nil),
		(*FromDevice_Event)(nil),
	}
	file_spacex_api_device_device_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Request_SignedRequest)(nil),
		(*Request_GetNextId)(nil),
		(*Request_Authenticate)(nil),
		(*Request_FactoryReset)(nil),
		(*Request_GetDeviceInfo)(nil),
		(*Request_GetHistory)(nil),
		(*Request_GetLog)(nil),
		(*Request_GetNetworkInterfaces)(nil),
		(*Request_GetPing)(nil),
		(*Request_PingHost)(nil),
		(*Request_GetStatus)(nil),
		(*Request_Reboot)(nil),
		(*Request_SetSku)(nil),
		(*Request_SetTrustedKeys)(nil),
		(*Request_SpeedTest)(nil),
		(*Request_Update)(nil),
		(*Request_DishStow)(nil),
		(*Request_TransceiverIfLoopbackTest)(nil),
		(*Request_TransceiverGetStatus)(nil),
		(*Request_WifiGetClients)(nil),
		(*Request_WifiGetPingMetrics)(nil),
		(*Request_WifiSetConfig)(nil),
		(*Request_WifiSetup)(nil),
	}
	file_spacex_api_device_device_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Response_GetNextId)(nil),
		(*Response_FactoryReset)(nil),
		(*Response_GetDeviceInfo)(nil),
		(*Response_GetLog)(nil),
		(*Response_GetNetworkInterfaces)(nil),
		(*Response_GetPing)(nil),
		(*Response_PingHost)(nil),
		(*Response_Reboot)(nil),
		(*Response_SpeedTest)(nil),
		(*Response_SetSku)(nil),
		(*Response_SetTrustedKeys)(nil),
		(*Response_Update)(nil),
		(*Response_DishAuthenticate)(nil),
		(*Response_DishGetHistory)(nil),
		(*Response_DishGetStatus)(nil),
		(*Response_DishStow)(nil),
		(*Response_TransceiverIfLoopbackTest)(nil),
		(*Response_TransceiverGetStatus)(nil),
		(*Response_WifiAuthenticate)(nil),
		(*Response_WifiGetClients)(nil),
		(*Response_WifiGetHistory)(nil),
		(*Response_WifiGetPingMetrics)(nil),
		(*Response_WifiGetStatus)(nil),
		(*Response_WifiSetConfig)(nil),
		(*Response_WifiSetup)(nil),
	}
	file_spacex_api_device_device_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Event_WifiNewClientConnected)(nil),
		(*Event_WifiAccountBonding)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacex_api_device_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spacex_api_device_device_proto_goTypes,
		DependencyIndexes: file_spacex_api_device_device_proto_depIdxs,
		MessageInfos:      file_spacex_api_device_device_proto_msgTypes,
	}.Build()
	File_spacex_api_device_device_proto = out.File
	file_spacex_api_device_device_proto_rawDesc = nil
	file_spacex_api_device_device_proto_goTypes = nil
	file_spacex_api_device_device_proto_depIdxs = nil
}
