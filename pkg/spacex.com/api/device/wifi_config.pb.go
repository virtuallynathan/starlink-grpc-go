// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: spacex/api/device/wifi_config.proto

package device

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeshAuth int32

const (
	MeshAuth_MESH_AUTH_UNKNOWN   MeshAuth = 0
	MeshAuth_MESH_AUTH_NEW       MeshAuth = 1
	MeshAuth_MESH_AUTH_TRUSTED   MeshAuth = 2
	MeshAuth_MESH_AUTH_UNTRUSTED MeshAuth = 3
)

// Enum value maps for MeshAuth.
var (
	MeshAuth_name = map[int32]string{
		0: "MESH_AUTH_UNKNOWN",
		1: "MESH_AUTH_NEW",
		2: "MESH_AUTH_TRUSTED",
		3: "MESH_AUTH_UNTRUSTED",
	}
	MeshAuth_value = map[string]int32{
		"MESH_AUTH_UNKNOWN":   0,
		"MESH_AUTH_NEW":       1,
		"MESH_AUTH_TRUSTED":   2,
		"MESH_AUTH_UNTRUSTED": 3,
	}
)

func (x MeshAuth) Enum() *MeshAuth {
	p := new(MeshAuth)
	*p = x
	return p
}

func (x MeshAuth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeshAuth) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[0].Descriptor()
}

func (MeshAuth) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[0]
}

func (x MeshAuth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeshAuth.Descriptor instead.
func (MeshAuth) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{0}
}

type WifiConfig_Security int32

const (
	WifiConfig_UNKNOWN  WifiConfig_Security = 0
	WifiConfig_WPA2     WifiConfig_Security = 1
	WifiConfig_WPA3     WifiConfig_Security = 2
	WifiConfig_WPA2WPA3 WifiConfig_Security = 3
)

// Enum value maps for WifiConfig_Security.
var (
	WifiConfig_Security_name = map[int32]string{
		0: "UNKNOWN",
		1: "WPA2",
		2: "WPA3",
		3: "WPA2WPA3",
	}
	WifiConfig_Security_value = map[string]int32{
		"UNKNOWN":  0,
		"WPA2":     1,
		"WPA3":     2,
		"WPA2WPA3": 3,
	}
)

func (x WifiConfig_Security) Enum() *WifiConfig_Security {
	p := new(WifiConfig_Security)
	*p = x
	return p
}

func (x WifiConfig_Security) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_Security) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[1].Descriptor()
}

func (WifiConfig_Security) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[1]
}

func (x WifiConfig_Security) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_Security.Descriptor instead.
func (WifiConfig_Security) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 0}
}

type WifiConfig_Band int32

const (
	WifiConfig_RF_UNKNOWN WifiConfig_Band = 0
	WifiConfig_RF_2GHZ    WifiConfig_Band = 2
	WifiConfig_RF_5GHZ    WifiConfig_Band = 5
)

// Enum value maps for WifiConfig_Band.
var (
	WifiConfig_Band_name = map[int32]string{
		0: "RF_UNKNOWN",
		2: "RF_2GHZ",
		5: "RF_5GHZ",
	}
	WifiConfig_Band_value = map[string]int32{
		"RF_UNKNOWN": 0,
		"RF_2GHZ":    2,
		"RF_5GHZ":    5,
	}
)

func (x WifiConfig_Band) Enum() *WifiConfig_Band {
	p := new(WifiConfig_Band)
	*p = x
	return p
}

func (x WifiConfig_Band) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_Band) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[2].Descriptor()
}

func (WifiConfig_Band) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[2]
}

func (x WifiConfig_Band) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_Band.Descriptor instead.
func (WifiConfig_Band) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 1}
}

type WifiConfig_WirelessMode int32

const (
	WifiConfig_WIRELESS_MODE_DEFAULT WifiConfig_WirelessMode = 0
	WifiConfig_A_ONLY                WifiConfig_WirelessMode = 1
	WifiConfig_B_ONLY                WifiConfig_WirelessMode = 2
	WifiConfig_G_ONLY                WifiConfig_WirelessMode = 3
	WifiConfig_N_ONLY                WifiConfig_WirelessMode = 4
	WifiConfig_B_G_MIXED             WifiConfig_WirelessMode = 5
	WifiConfig_A_N_MIXED             WifiConfig_WirelessMode = 6
	WifiConfig_G_N_MIXED             WifiConfig_WirelessMode = 7
	WifiConfig_B_G_N_MIXED           WifiConfig_WirelessMode = 8
	WifiConfig_A_AN_AC_MIXED         WifiConfig_WirelessMode = 9
	WifiConfig_AN_AC_MIXED           WifiConfig_WirelessMode = 10
	WifiConfig_B_G_N_AX_MIXED        WifiConfig_WirelessMode = 11
	WifiConfig_A_AN_AC_AX_MIXED      WifiConfig_WirelessMode = 12
)

// Enum value maps for WifiConfig_WirelessMode.
var (
	WifiConfig_WirelessMode_name = map[int32]string{
		0:  "WIRELESS_MODE_DEFAULT",
		1:  "A_ONLY",
		2:  "B_ONLY",
		3:  "G_ONLY",
		4:  "N_ONLY",
		5:  "B_G_MIXED",
		6:  "A_N_MIXED",
		7:  "G_N_MIXED",
		8:  "B_G_N_MIXED",
		9:  "A_AN_AC_MIXED",
		10: "AN_AC_MIXED",
		11: "B_G_N_AX_MIXED",
		12: "A_AN_AC_AX_MIXED",
	}
	WifiConfig_WirelessMode_value = map[string]int32{
		"WIRELESS_MODE_DEFAULT": 0,
		"A_ONLY":                1,
		"B_ONLY":                2,
		"G_ONLY":                3,
		"N_ONLY":                4,
		"B_G_MIXED":             5,
		"A_N_MIXED":             6,
		"G_N_MIXED":             7,
		"B_G_N_MIXED":           8,
		"A_AN_AC_MIXED":         9,
		"AN_AC_MIXED":           10,
		"B_G_N_AX_MIXED":        11,
		"A_AN_AC_AX_MIXED":      12,
	}
)

func (x WifiConfig_WirelessMode) Enum() *WifiConfig_WirelessMode {
	p := new(WifiConfig_WirelessMode)
	*p = x
	return p
}

func (x WifiConfig_WirelessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_WirelessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[3].Descriptor()
}

func (WifiConfig_WirelessMode) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[3]
}

func (x WifiConfig_WirelessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_WirelessMode.Descriptor instead.
func (WifiConfig_WirelessMode) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 2}
}

type WifiConfig_HTBandwidth int32

const (
	WifiConfig_HT_BANDWIDTH_DEFAULT      WifiConfig_HTBandwidth = 0
	WifiConfig_HT_BANDWIDTH_20_MHZ       WifiConfig_HTBandwidth = 1
	WifiConfig_HT_BANDWIDTH_20_OR_40_MHZ WifiConfig_HTBandwidth = 2
)

// Enum value maps for WifiConfig_HTBandwidth.
var (
	WifiConfig_HTBandwidth_name = map[int32]string{
		0: "HT_BANDWIDTH_DEFAULT",
		1: "HT_BANDWIDTH_20_MHZ",
		2: "HT_BANDWIDTH_20_OR_40_MHZ",
	}
	WifiConfig_HTBandwidth_value = map[string]int32{
		"HT_BANDWIDTH_DEFAULT":      0,
		"HT_BANDWIDTH_20_MHZ":       1,
		"HT_BANDWIDTH_20_OR_40_MHZ": 2,
	}
)

func (x WifiConfig_HTBandwidth) Enum() *WifiConfig_HTBandwidth {
	p := new(WifiConfig_HTBandwidth)
	*p = x
	return p
}

func (x WifiConfig_HTBandwidth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_HTBandwidth) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[4].Descriptor()
}

func (WifiConfig_HTBandwidth) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[4]
}

func (x WifiConfig_HTBandwidth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_HTBandwidth.Descriptor instead.
func (WifiConfig_HTBandwidth) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 3}
}

type WifiConfig_VHTBandwidth int32

const (
	WifiConfig_VHT_BANDWIDTH_DEFAULT        WifiConfig_VHTBandwidth = 0
	WifiConfig_VHT_BANDWIDTH_DISABLED       WifiConfig_VHTBandwidth = 1
	WifiConfig_VHT_BANDWIDTH_80_MHZ         WifiConfig_VHTBandwidth = 2
	WifiConfig_VHT_BANDWIDTH_160_MHZ        WifiConfig_VHTBandwidth = 3
	WifiConfig_VHT_BANDWIDTH_80_PLUS_80_MHZ WifiConfig_VHTBandwidth = 4
)

// Enum value maps for WifiConfig_VHTBandwidth.
var (
	WifiConfig_VHTBandwidth_name = map[int32]string{
		0: "VHT_BANDWIDTH_DEFAULT",
		1: "VHT_BANDWIDTH_DISABLED",
		2: "VHT_BANDWIDTH_80_MHZ",
		3: "VHT_BANDWIDTH_160_MHZ",
		4: "VHT_BANDWIDTH_80_PLUS_80_MHZ",
	}
	WifiConfig_VHTBandwidth_value = map[string]int32{
		"VHT_BANDWIDTH_DEFAULT":        0,
		"VHT_BANDWIDTH_DISABLED":       1,
		"VHT_BANDWIDTH_80_MHZ":         2,
		"VHT_BANDWIDTH_160_MHZ":        3,
		"VHT_BANDWIDTH_80_PLUS_80_MHZ": 4,
	}
)

func (x WifiConfig_VHTBandwidth) Enum() *WifiConfig_VHTBandwidth {
	p := new(WifiConfig_VHTBandwidth)
	*p = x
	return p
}

func (x WifiConfig_VHTBandwidth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_VHTBandwidth) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[5].Descriptor()
}

func (WifiConfig_VHTBandwidth) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[5]
}

func (x WifiConfig_VHTBandwidth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_VHTBandwidth.Descriptor instead.
func (WifiConfig_VHTBandwidth) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 4}
}

type MeshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName      string   `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ApplyDisplayName bool     `protobuf:"varint,2,opt,name=apply_display_name,json=applyDisplayName,proto3" json:"apply_display_name,omitempty"`
	Auth             MeshAuth `protobuf:"varint,3,opt,name=auth,proto3,enum=SpaceX.API.Device.MeshAuth" json:"auth,omitempty"`
	ApplyAuth        bool     `protobuf:"varint,4,opt,name=apply_auth,json=applyAuth,proto3" json:"apply_auth,omitempty"`
	LastConnected    int64    `protobuf:"varint,5,opt,name=last_connected,json=lastConnected,proto3" json:"last_connected,omitempty"`
	Incarnation      uint64   `protobuf:"varint,7,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
}

func (x *MeshConfig) Reset() {
	*x = MeshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConfig) ProtoMessage() {}

func (x *MeshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConfig.ProtoReflect.Descriptor instead.
func (*MeshConfig) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{0}
}

func (x *MeshConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MeshConfig) GetApplyDisplayName() bool {
	if x != nil {
		return x.ApplyDisplayName
	}
	return false
}

func (x *MeshConfig) GetAuth() MeshAuth {
	if x != nil {
		return x.Auth
	}
	return MeshAuth_MESH_AUTH_UNKNOWN
}

func (x *MeshConfig) GetApplyAuth() bool {
	if x != nil {
		return x.ApplyAuth
	}
	return false
}

func (x *MeshConfig) GetLastConnected() int64 {
	if x != nil {
		return x.LastConnected
	}
	return 0
}

func (x *MeshConfig) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

type WifiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode        string `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	PinCountryCode     bool   `protobuf:"varint,53,opt,name=pin_country_code,json=pinCountryCode,proto3" json:"pin_country_code,omitempty"`
	CustomPowerTable   bool   `protobuf:"varint,54,opt,name=custom_power_table,json=customPowerTable,proto3" json:"custom_power_table,omitempty"`
	SetupComplete      bool   `protobuf:"varint,7,opt,name=setup_complete,json=setupComplete,proto3" json:"setup_complete,omitempty"`
	ApplySetupComplete bool   `protobuf:"varint,1010,opt,name=apply_setup_complete,json=applySetupComplete,proto3" json:"apply_setup_complete,omitempty"`
	Version            uint32 `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	// Deprecated: Do not use.
	MacWan string `protobuf:"bytes,12,opt,name=mac_wan,json=macWan,proto3" json:"mac_wan,omitempty"`
	// Deprecated: Do not use.
	MacLan                     string                 `protobuf:"bytes,13,opt,name=mac_lan,json=macLan,proto3" json:"mac_lan,omitempty"`
	Channel_2Ghz               uint32                 `protobuf:"varint,19,opt,name=channel_2ghz,json=channel2ghz,proto3" json:"channel_2ghz,omitempty"`
	ApplyChannel_2Ghz          bool                   `protobuf:"varint,1013,opt,name=apply_channel_2ghz,json=applyChannel2ghz,proto3" json:"apply_channel_2ghz,omitempty"`
	Channel_5Ghz               uint32                 `protobuf:"varint,20,opt,name=channel_5ghz,json=channel5ghz,proto3" json:"channel_5ghz,omitempty"`
	ApplyChannel_5Ghz          bool                   `protobuf:"varint,1014,opt,name=apply_channel_5ghz,json=applyChannel5ghz,proto3" json:"apply_channel_5ghz,omitempty"`
	MeshConfigs                map[string]*MeshConfig `protobuf:"bytes,33,rep,name=mesh_configs,json=meshConfigs,proto3" json:"mesh_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MeshConfigsUpdates         map[string]*MeshConfig `protobuf:"bytes,3033,rep,name=mesh_configs_updates,json=meshConfigsUpdates,proto3" json:"mesh_configs_updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApplyMeshConfigs           bool                   `protobuf:"varint,1033,opt,name=apply_mesh_configs,json=applyMeshConfigs,proto3" json:"apply_mesh_configs,omitempty"`
	DynamicKeys                []*PublicKey           `protobuf:"bytes,22,rep,name=dynamic_keys,json=dynamicKeys,proto3" json:"dynamic_keys,omitempty"`
	ApplyDynamicKeys           bool                   `protobuf:"varint,39,opt,name=apply_dynamic_keys,json=applyDynamicKeys,proto3" json:"apply_dynamic_keys,omitempty"`
	IsRepeater                 bool                   `protobuf:"varint,23,opt,name=is_repeater,json=isRepeater,proto3" json:"is_repeater,omitempty"`
	ApplyIsRepeater            bool                   `protobuf:"varint,1031,opt,name=apply_is_repeater,json=applyIsRepeater,proto3" json:"apply_is_repeater,omitempty"`
	ApMode                     bool                   `protobuf:"varint,51,opt,name=ap_mode,json=apMode,proto3" json:"ap_mode,omitempty"`
	ApplyApMode                bool                   `protobuf:"varint,1066,opt,name=apply_ap_mode,json=applyApMode,proto3" json:"apply_ap_mode,omitempty"`
	IsAviation                 bool                   `protobuf:"varint,49,opt,name=is_aviation,json=isAviation,proto3" json:"is_aviation,omitempty"`
	ApplyIsAviation            bool                   `protobuf:"varint,1064,opt,name=apply_is_aviation,json=applyIsAviation,proto3" json:"apply_is_aviation,omitempty"`
	BootCount                  int32                  `protobuf:"varint,26,opt,name=boot_count,json=bootCount,proto3" json:"boot_count,omitempty"`
	Boot                       *BootInfo              `protobuf:"bytes,3001,opt,name=boot,proto3" json:"boot,omitempty"`
	Nameservers                []string               `protobuf:"bytes,30,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	ApplyNameservers           bool                   `protobuf:"varint,1054,opt,name=apply_nameservers,json=applyNameservers,proto3" json:"apply_nameservers,omitempty"`
	SecureDns                  bool                   `protobuf:"varint,50,opt,name=secure_dns,json=secureDns,proto3" json:"secure_dns,omitempty"`
	ApplySecureDns             bool                   `protobuf:"varint,1065,opt,name=apply_secure_dns,json=applySecureDns,proto3" json:"apply_secure_dns,omitempty"`
	BypassMode                 bool                   `protobuf:"varint,31,opt,name=bypass_mode,json=bypassMode,proto3" json:"bypass_mode,omitempty"`
	ApplyBypassMode            bool                   `protobuf:"varint,1055,opt,name=apply_bypass_mode,json=applyBypassMode,proto3" json:"apply_bypass_mode,omitempty"`
	DfsEnabled                 bool                   `protobuf:"varint,42,opt,name=dfs_enabled,json=dfsEnabled,proto3" json:"dfs_enabled,omitempty"`
	ApplyDfsEnabled            bool                   `protobuf:"varint,1058,opt,name=apply_dfs_enabled,json=applyDfsEnabled,proto3" json:"apply_dfs_enabled,omitempty"`
	DisableMeshOnboarding      bool                   `protobuf:"varint,52,opt,name=disable_mesh_onboarding,json=disableMeshOnboarding,proto3" json:"disable_mesh_onboarding,omitempty"`
	ApplyDisableMeshOnboarding bool                   `protobuf:"varint,1067,opt,name=apply_disable_mesh_onboarding,json=applyDisableMeshOnboarding,proto3" json:"apply_disable_mesh_onboarding,omitempty"`
	Networks                   []*WifiConfig_Network  `protobuf:"bytes,1100,rep,name=networks,proto3" json:"networks,omitempty"`
	ApplyNetworks              bool                   `protobuf:"varint,1101,opt,name=apply_networks,json=applyNetworks,proto3" json:"apply_networks,omitempty"`
	// Deprecated: Do not use.
	NetworkName string `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	// Deprecated: Do not use.
	ApplyNetworkName bool `protobuf:"varint,1001,opt,name=apply_network_name,json=applyNetworkName,proto3" json:"apply_network_name,omitempty"`
	// Deprecated: Do not use.
	NetworkPassword string `protobuf:"bytes,2,opt,name=network_password,json=networkPassword,proto3" json:"network_password,omitempty"`
	// Deprecated: Do not use.
	ApplyNetworkPassword bool `protobuf:"varint,1002,opt,name=apply_network_password,json=applyNetworkPassword,proto3" json:"apply_network_password,omitempty"`
	// Deprecated: Do not use.
	LanIpv4 string `protobuf:"bytes,5,opt,name=lan_ipv4,json=lanIpv4,proto3" json:"lan_ipv4,omitempty"`
	// Deprecated: Do not use.
	ApplyLanIpv4 bool `protobuf:"varint,37,opt,name=apply_lan_ipv4,json=applyLanIpv4,proto3" json:"apply_lan_ipv4,omitempty"`
	// Deprecated: Do not use.
	WifiSecurity WifiConfig_Security `protobuf:"varint,10,opt,name=wifi_security,json=wifiSecurity,proto3,enum=SpaceX.API.Device.WifiConfig_Security" json:"wifi_security,omitempty"`
	// Deprecated: Do not use.
	ApplyWifiSecurity bool `protobuf:"varint,1004,opt,name=apply_wifi_security,json=applyWifiSecurity,proto3" json:"apply_wifi_security,omitempty"`
	// Deprecated: Do not use.
	NetworkName_5Ghz string `protobuf:"bytes,11,opt,name=network_name_5ghz,json=networkName5ghz,proto3" json:"network_name_5ghz,omitempty"`
	// Deprecated: Do not use.
	ApplyNetworkName_5Ghz  bool                    `protobuf:"varint,1005,opt,name=apply_network_name_5ghz,json=applyNetworkName5ghz,proto3" json:"apply_network_name_5ghz,omitempty"`
	EnableRemoteSsh        bool                    `protobuf:"varint,34,opt,name=enable_remote_ssh,json=enableRemoteSsh,proto3" json:"enable_remote_ssh,omitempty"`
	ApplyEnableRemoteSsh   bool                    `protobuf:"varint,1057,opt,name=apply_enable_remote_ssh,json=applyEnableRemoteSsh,proto3" json:"apply_enable_remote_ssh,omitempty"`
	LastRemoteSshAccess    int64                   `protobuf:"varint,35,opt,name=last_remote_ssh_access,json=lastRemoteSshAccess,proto3" json:"last_remote_ssh_access,omitempty"`
	Incarnation            uint64                  `protobuf:"varint,43,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	WirelessMode_2Ghz      WifiConfig_WirelessMode `protobuf:"varint,44,opt,name=wireless_mode_2ghz,json=wirelessMode2ghz,proto3,enum=SpaceX.API.Device.WifiConfig_WirelessMode" json:"wireless_mode_2ghz,omitempty"`
	ApplyWirelessMode_2Ghz bool                    `protobuf:"varint,1059,opt,name=apply_wireless_mode_2ghz,json=applyWirelessMode2ghz,proto3" json:"apply_wireless_mode_2ghz,omitempty"`
	WirelessMode_5Ghz      WifiConfig_WirelessMode `protobuf:"varint,45,opt,name=wireless_mode_5ghz,json=wirelessMode5ghz,proto3,enum=SpaceX.API.Device.WifiConfig_WirelessMode" json:"wireless_mode_5ghz,omitempty"`
	ApplyWirelessMode_5Ghz bool                    `protobuf:"varint,1060,opt,name=apply_wireless_mode_5ghz,json=applyWirelessMode5ghz,proto3" json:"apply_wireless_mode_5ghz,omitempty"`
	HtBandwidth_2Ghz       WifiConfig_HTBandwidth  `protobuf:"varint,46,opt,name=ht_bandwidth_2ghz,json=htBandwidth2ghz,proto3,enum=SpaceX.API.Device.WifiConfig_HTBandwidth" json:"ht_bandwidth_2ghz,omitempty"`
	ApplyHtBandwidth_2Ghz  bool                    `protobuf:"varint,1061,opt,name=apply_ht_bandwidth_2ghz,json=applyHtBandwidth2ghz,proto3" json:"apply_ht_bandwidth_2ghz,omitempty"`
	HtBandwidth_5Ghz       WifiConfig_HTBandwidth  `protobuf:"varint,47,opt,name=ht_bandwidth_5ghz,json=htBandwidth5ghz,proto3,enum=SpaceX.API.Device.WifiConfig_HTBandwidth" json:"ht_bandwidth_5ghz,omitempty"`
	ApplyHtBandwidth_5Ghz  bool                    `protobuf:"varint,1062,opt,name=apply_ht_bandwidth_5ghz,json=applyHtBandwidth5ghz,proto3" json:"apply_ht_bandwidth_5ghz,omitempty"`
	VhtBandwidth           WifiConfig_VHTBandwidth `protobuf:"varint,48,opt,name=vht_bandwidth,json=vhtBandwidth,proto3,enum=SpaceX.API.Device.WifiConfig_VHTBandwidth" json:"vht_bandwidth,omitempty"`
	ApplyVhtBandwidth      bool                    `protobuf:"varint,1063,opt,name=apply_vht_bandwidth,json=applyVhtBandwidth,proto3" json:"apply_vht_bandwidth,omitempty"`
	UsePublicServices      bool                    `protobuf:"varint,55,opt,name=use_public_services,json=usePublicServices,proto3" json:"use_public_services,omitempty"`
	ApplyUsePublicServices bool                    `protobuf:"varint,1068,opt,name=apply_use_public_services,json=applyUsePublicServices,proto3" json:"apply_use_public_services,omitempty"`
}

func (x *WifiConfig) Reset() {
	*x = WifiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig) ProtoMessage() {}

func (x *WifiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig.ProtoReflect.Descriptor instead.
func (*WifiConfig) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1}
}

func (x *WifiConfig) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *WifiConfig) GetPinCountryCode() bool {
	if x != nil {
		return x.PinCountryCode
	}
	return false
}

func (x *WifiConfig) GetCustomPowerTable() bool {
	if x != nil {
		return x.CustomPowerTable
	}
	return false
}

func (x *WifiConfig) GetSetupComplete() bool {
	if x != nil {
		return x.SetupComplete
	}
	return false
}

func (x *WifiConfig) GetApplySetupComplete() bool {
	if x != nil {
		return x.ApplySetupComplete
	}
	return false
}

func (x *WifiConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Deprecated: Do not use.
func (x *WifiConfig) GetMacWan() string {
	if x != nil {
		return x.MacWan
	}
	return ""
}

// Deprecated: Do not use.
func (x *WifiConfig) GetMacLan() string {
	if x != nil {
		return x.MacLan
	}
	return ""
}

func (x *WifiConfig) GetChannel_2Ghz() uint32 {
	if x != nil {
		return x.Channel_2Ghz
	}
	return 0
}

func (x *WifiConfig) GetApplyChannel_2Ghz() bool {
	if x != nil {
		return x.ApplyChannel_2Ghz
	}
	return false
}

func (x *WifiConfig) GetChannel_5Ghz() uint32 {
	if x != nil {
		return x.Channel_5Ghz
	}
	return 0
}

func (x *WifiConfig) GetApplyChannel_5Ghz() bool {
	if x != nil {
		return x.ApplyChannel_5Ghz
	}
	return false
}

func (x *WifiConfig) GetMeshConfigs() map[string]*MeshConfig {
	if x != nil {
		return x.MeshConfigs
	}
	return nil
}

func (x *WifiConfig) GetMeshConfigsUpdates() map[string]*MeshConfig {
	if x != nil {
		return x.MeshConfigsUpdates
	}
	return nil
}

func (x *WifiConfig) GetApplyMeshConfigs() bool {
	if x != nil {
		return x.ApplyMeshConfigs
	}
	return false
}

func (x *WifiConfig) GetDynamicKeys() []*PublicKey {
	if x != nil {
		return x.DynamicKeys
	}
	return nil
}

func (x *WifiConfig) GetApplyDynamicKeys() bool {
	if x != nil {
		return x.ApplyDynamicKeys
	}
	return false
}

func (x *WifiConfig) GetIsRepeater() bool {
	if x != nil {
		return x.IsRepeater
	}
	return false
}

func (x *WifiConfig) GetApplyIsRepeater() bool {
	if x != nil {
		return x.ApplyIsRepeater
	}
	return false
}

func (x *WifiConfig) GetApMode() bool {
	if x != nil {
		return x.ApMode
	}
	return false
}

func (x *WifiConfig) GetApplyApMode() bool {
	if x != nil {
		return x.ApplyApMode
	}
	return false
}

func (x *WifiConfig) GetIsAviation() bool {
	if x != nil {
		return x.IsAviation
	}
	return false
}

func (x *WifiConfig) GetApplyIsAviation() bool {
	if x != nil {
		return x.ApplyIsAviation
	}
	return false
}

func (x *WifiConfig) GetBootCount() int32 {
	if x != nil {
		return x.BootCount
	}
	return 0
}

func (x *WifiConfig) GetBoot() *BootInfo {
	if x != nil {
		return x.Boot
	}
	return nil
}

func (x *WifiConfig) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *WifiConfig) GetApplyNameservers() bool {
	if x != nil {
		return x.ApplyNameservers
	}
	return false
}

func (x *WifiConfig) GetSecureDns() bool {
	if x != nil {
		return x.SecureDns
	}
	return false
}

func (x *WifiConfig) GetApplySecureDns() bool {
	if x != nil {
		return x.ApplySecureDns
	}
	return false
}

func (x *WifiConfig) GetBypassMode() bool {
	if x != nil {
		return x.BypassMode
	}
	return false
}

func (x *WifiConfig) GetApplyBypassMode() bool {
	if x != nil {
		return x.ApplyBypassMode
	}
	return false
}

func (x *WifiConfig) GetDfsEnabled() bool {
	if x != nil {
		return x.DfsEnabled
	}
	return false
}

func (x *WifiConfig) GetApplyDfsEnabled() bool {
	if x != nil {
		return x.ApplyDfsEnabled
	}
	return false
}

func (x *WifiConfig) GetDisableMeshOnboarding() bool {
	if x != nil {
		return x.DisableMeshOnboarding
	}
	return false
}

func (x *WifiConfig) GetApplyDisableMeshOnboarding() bool {
	if x != nil {
		return x.ApplyDisableMeshOnboarding
	}
	return false
}

func (x *WifiConfig) GetNetworks() []*WifiConfig_Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *WifiConfig) GetApplyNetworks() bool {
	if x != nil {
		return x.ApplyNetworks
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

// Deprecated: Do not use.
func (x *WifiConfig) GetApplyNetworkName() bool {
	if x != nil {
		return x.ApplyNetworkName
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetNetworkPassword() string {
	if x != nil {
		return x.NetworkPassword
	}
	return ""
}

// Deprecated: Do not use.
func (x *WifiConfig) GetApplyNetworkPassword() bool {
	if x != nil {
		return x.ApplyNetworkPassword
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetLanIpv4() string {
	if x != nil {
		return x.LanIpv4
	}
	return ""
}

// Deprecated: Do not use.
func (x *WifiConfig) GetApplyLanIpv4() bool {
	if x != nil {
		return x.ApplyLanIpv4
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetWifiSecurity() WifiConfig_Security {
	if x != nil {
		return x.WifiSecurity
	}
	return WifiConfig_UNKNOWN
}

// Deprecated: Do not use.
func (x *WifiConfig) GetApplyWifiSecurity() bool {
	if x != nil {
		return x.ApplyWifiSecurity
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetNetworkName_5Ghz() string {
	if x != nil {
		return x.NetworkName_5Ghz
	}
	return ""
}

// Deprecated: Do not use.
func (x *WifiConfig) GetApplyNetworkName_5Ghz() bool {
	if x != nil {
		return x.ApplyNetworkName_5Ghz
	}
	return false
}

func (x *WifiConfig) GetEnableRemoteSsh() bool {
	if x != nil {
		return x.EnableRemoteSsh
	}
	return false
}

func (x *WifiConfig) GetApplyEnableRemoteSsh() bool {
	if x != nil {
		return x.ApplyEnableRemoteSsh
	}
	return false
}

func (x *WifiConfig) GetLastRemoteSshAccess() int64 {
	if x != nil {
		return x.LastRemoteSshAccess
	}
	return 0
}

func (x *WifiConfig) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

func (x *WifiConfig) GetWirelessMode_2Ghz() WifiConfig_WirelessMode {
	if x != nil {
		return x.WirelessMode_2Ghz
	}
	return WifiConfig_WIRELESS_MODE_DEFAULT
}

func (x *WifiConfig) GetApplyWirelessMode_2Ghz() bool {
	if x != nil {
		return x.ApplyWirelessMode_2Ghz
	}
	return false
}

func (x *WifiConfig) GetWirelessMode_5Ghz() WifiConfig_WirelessMode {
	if x != nil {
		return x.WirelessMode_5Ghz
	}
	return WifiConfig_WIRELESS_MODE_DEFAULT
}

func (x *WifiConfig) GetApplyWirelessMode_5Ghz() bool {
	if x != nil {
		return x.ApplyWirelessMode_5Ghz
	}
	return false
}

func (x *WifiConfig) GetHtBandwidth_2Ghz() WifiConfig_HTBandwidth {
	if x != nil {
		return x.HtBandwidth_2Ghz
	}
	return WifiConfig_HT_BANDWIDTH_DEFAULT
}

func (x *WifiConfig) GetApplyHtBandwidth_2Ghz() bool {
	if x != nil {
		return x.ApplyHtBandwidth_2Ghz
	}
	return false
}

func (x *WifiConfig) GetHtBandwidth_5Ghz() WifiConfig_HTBandwidth {
	if x != nil {
		return x.HtBandwidth_5Ghz
	}
	return WifiConfig_HT_BANDWIDTH_DEFAULT
}

func (x *WifiConfig) GetApplyHtBandwidth_5Ghz() bool {
	if x != nil {
		return x.ApplyHtBandwidth_5Ghz
	}
	return false
}

func (x *WifiConfig) GetVhtBandwidth() WifiConfig_VHTBandwidth {
	if x != nil {
		return x.VhtBandwidth
	}
	return WifiConfig_VHT_BANDWIDTH_DEFAULT
}

func (x *WifiConfig) GetApplyVhtBandwidth() bool {
	if x != nil {
		return x.ApplyVhtBandwidth
	}
	return false
}

func (x *WifiConfig) GetUsePublicServices() bool {
	if x != nil {
		return x.UsePublicServices
	}
	return false
}

func (x *WifiConfig) GetApplyUsePublicServices() bool {
	if x != nil {
		return x.ApplyUsePublicServices
	}
	return false
}

type AuthOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthOpen) Reset() {
	*x = AuthOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthOpen) ProtoMessage() {}

func (x *AuthOpen) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthOpen.ProtoReflect.Descriptor instead.
func (*AuthOpen) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{2}
}

type AuthWpa2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthWpa2) Reset() {
	*x = AuthWpa2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthWpa2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthWpa2) ProtoMessage() {}

func (x *AuthWpa2) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthWpa2.ProtoReflect.Descriptor instead.
func (*AuthWpa2) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{3}
}

func (x *AuthWpa2) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthWpa3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthWpa3) Reset() {
	*x = AuthWpa3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthWpa3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthWpa3) ProtoMessage() {}

func (x *AuthWpa3) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthWpa3.ProtoReflect.Descriptor instead.
func (*AuthWpa3) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4}
}

func (x *AuthWpa3) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthWpa2Wpa3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthWpa2Wpa3) Reset() {
	*x = AuthWpa2Wpa3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthWpa2Wpa3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthWpa2Wpa3) ProtoMessage() {}

func (x *AuthWpa2Wpa3) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthWpa2Wpa3.ProtoReflect.Descriptor instead.
func (*AuthWpa2Wpa3) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{5}
}

func (x *AuthWpa2Wpa3) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthRadius struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Deprecated: Do not use.
	ServerCa        string `protobuf:"bytes,3,opt,name=server_ca,json=serverCa,proto3" json:"server_ca,omitempty"`
	ServerCaBase_64 string `protobuf:"bytes,4,opt,name=server_ca_base_64,json=serverCaBase64,proto3" json:"server_ca_base_64,omitempty"`
	Password        string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthRadius) Reset() {
	*x = AuthRadius{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRadius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRadius) ProtoMessage() {}

func (x *AuthRadius) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRadius.ProtoReflect.Descriptor instead.
func (*AuthRadius) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{6}
}

func (x *AuthRadius) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

// Deprecated: Do not use.
func (x *AuthRadius) GetServerCa() string {
	if x != nil {
		return x.ServerCa
	}
	return ""
}

func (x *AuthRadius) GetServerCaBase_64() string {
	if x != nil {
		return x.ServerCaBase_64
	}
	return ""
}

func (x *AuthRadius) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type WifiConfig_BasicServiceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid string `protobuf:"bytes,1003,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Ssid  string `protobuf:"bytes,1005,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// Types that are assignable to Auth:
	//
	//	*WifiConfig_BasicServiceSet_AuthOpen
	//	*WifiConfig_BasicServiceSet_AuthWpa2
	//	*WifiConfig_BasicServiceSet_AuthWpa3
	//	*WifiConfig_BasicServiceSet_AuthWpa2Wpa3
	//	*WifiConfig_BasicServiceSet_AuthRadius
	Auth    isWifiConfig_BasicServiceSet_Auth `protobuf_oneof:"auth"`
	Band    WifiConfig_Band                   `protobuf:"varint,1011,opt,name=band,proto3,enum=SpaceX.API.Device.WifiConfig_Band" json:"band,omitempty"`
	Disable bool                              `protobuf:"varint,1013,opt,name=disable,proto3" json:"disable,omitempty"`
	Hidden  bool                              `protobuf:"varint,1015,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *WifiConfig_BasicServiceSet) Reset() {
	*x = WifiConfig_BasicServiceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiConfig_BasicServiceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_BasicServiceSet) ProtoMessage() {}

func (x *WifiConfig_BasicServiceSet) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_BasicServiceSet.ProtoReflect.Descriptor instead.
func (*WifiConfig_BasicServiceSet) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 2}
}

func (x *WifiConfig_BasicServiceSet) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *WifiConfig_BasicServiceSet) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (m *WifiConfig_BasicServiceSet) GetAuth() isWifiConfig_BasicServiceSet_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthOpen() *AuthOpen {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthOpen); ok {
		return x.AuthOpen
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthWpa2() *AuthWpa2 {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa2); ok {
		return x.AuthWpa2
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthWpa3() *AuthWpa3 {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa3); ok {
		return x.AuthWpa3
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthWpa2Wpa3() *AuthWpa2Wpa3 {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3); ok {
		return x.AuthWpa2Wpa3
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthRadius() *AuthRadius {
	if x, ok := x.GetAuth().(*WifiConfig_BasicServiceSet_AuthRadius); ok {
		return x.AuthRadius
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetBand() WifiConfig_Band {
	if x != nil {
		return x.Band
	}
	return WifiConfig_RF_UNKNOWN
}

func (x *WifiConfig_BasicServiceSet) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *WifiConfig_BasicServiceSet) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type isWifiConfig_BasicServiceSet_Auth interface {
	isWifiConfig_BasicServiceSet_Auth()
}

type WifiConfig_BasicServiceSet_AuthOpen struct {
	AuthOpen *AuthOpen `protobuf:"bytes,2001,opt,name=auth_open,json=authOpen,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2 struct {
	AuthWpa2 *AuthWpa2 `protobuf:"bytes,2002,opt,name=auth_wpa2,json=authWpa2,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa3 struct {
	AuthWpa3 *AuthWpa3 `protobuf:"bytes,2003,opt,name=auth_wpa3,json=authWpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2Wpa3 struct {
	AuthWpa2Wpa3 *AuthWpa2Wpa3 `protobuf:"bytes,2004,opt,name=auth_wpa2_wpa3,json=authWpa2Wpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthRadius struct {
	AuthRadius *AuthRadius `protobuf:"bytes,2005,opt,name=auth_radius,json=authRadius,proto3,oneof"`
}

func (*WifiConfig_BasicServiceSet_AuthOpen) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2Wpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthRadius) isWifiConfig_BasicServiceSet_Auth() {}

type WifiConfig_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4             string                        `protobuf:"bytes,1003,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	BasicServiceSets []*WifiConfig_BasicServiceSet `protobuf:"bytes,1007,rep,name=basic_service_sets,json=basicServiceSets,proto3" json:"basic_service_sets,omitempty"`
	ClientIsolation  bool                          `protobuf:"varint,1008,opt,name=client_isolation,json=clientIsolation,proto3" json:"client_isolation,omitempty"`
	Guest            bool                          `protobuf:"varint,1009,opt,name=guest,proto3" json:"guest,omitempty"`
	Landing          string                        `protobuf:"bytes,1010,opt,name=landing,proto3" json:"landing,omitempty"`
}

func (x *WifiConfig_Network) Reset() {
	*x = WifiConfig_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiConfig_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_Network) ProtoMessage() {}

func (x *WifiConfig_Network) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_Network.ProtoReflect.Descriptor instead.
func (*WifiConfig_Network) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1, 3}
}

func (x *WifiConfig_Network) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *WifiConfig_Network) GetBasicServiceSets() []*WifiConfig_BasicServiceSet {
	if x != nil {
		return x.BasicServiceSets
	}
	return nil
}

func (x *WifiConfig_Network) GetClientIsolation() bool {
	if x != nil {
		return x.ClientIsolation
	}
	return false
}

func (x *WifiConfig_Network) GetGuest() bool {
	if x != nil {
		return x.Guest
	}
	return false
}

func (x *WifiConfig_Network) GetLanding() string {
	if x != nil {
		return x.Landing
	}
	return ""
}

var File_spacex_api_device_wifi_config_proto protoreflect.FileDescriptor

var file_spacex_api_device_wifi_config_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x02, 0x0a, 0x0a, 0x4d, 0x65,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xf5,
	0x27, 0x0a, 0x0a, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x07,
	0x6d, 0x61, 0x63, 0x5f, 0x77, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x57, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x61, 0x63,
	0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x6d, 0x61, 0x63, 0x4c, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18,
	0xf5, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x51, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x68, 0x0a,
	0x14, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0xd9, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x89, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x87, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xaa, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x61,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa8, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x73, 0x41, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x9e, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x44, 0x6e, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x6e, 0x73, 0x18, 0xa9, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x44, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x9f, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x66, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64,
	0x66, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa2,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x66, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x42,
	0x0a, 0x1d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0xab, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x42, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0xcc,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x25,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x49, 0x70, 0x76,
	0x34, 0x12, 0x28, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x4c, 0x61, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x12, 0x4f, 0x0a, 0x0d, 0x77,
	0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c,
	0x77, 0x69, 0x66, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x13,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2e, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x35, 0x67, 0x68,
	0x7a, 0x12, 0x3a, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0xed, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73,
	0x73, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x73, 0x73, 0x68, 0x18, 0xa1, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x73,
	0x68, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x73, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x73, 0x68,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x63,
	0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x12, 0x77, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x10, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x67,
	0x68, 0x7a, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0xa3,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x58, 0x0a, 0x12,
	0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x18, 0xa4, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x35, 0x67, 0x68, 0x7a,
	0x12, 0x55, 0x0a, 0x11, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x0f, 0x68, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x32, 0x67,
	0x68, 0x7a, 0x18, 0xa5, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x48, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x32, 0x67, 0x68, 0x7a, 0x12,
	0x55, 0x0a, 0x11, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x0f, 0x68, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x68, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x18, 0xa6, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48,
	0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x4f,
	0x0a, 0x0d, 0x76, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x48, 0x54, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x52, 0x0c, 0x76, 0x68, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x2f, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x76, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xa7, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x56, 0x68, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75,
	0x73, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0xac, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x10,
	0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x17, 0x4d,
	0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xbe, 0x04, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x04,
	0x73, 0x73, 0x69, 0x64, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0xd1,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x70,
	0x65, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3b,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x77, 0x70, 0x61, 0x32, 0x18, 0xd2, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x32, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x32, 0x12, 0x3b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x77, 0x70, 0x61, 0x33, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x33, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x33, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x77, 0x70, 0x61, 0x32, 0x5f, 0x77, 0x70, 0x61, 0x33, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x32, 0x57, 0x70,
	0x61, 0x33, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x32, 0x57, 0x70,
	0x61, 0x33, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0xd5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18, 0xf3, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x19,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x4a, 0x06, 0x08, 0xe8, 0x07, 0x10,
	0xe9, 0x07, 0x4a, 0x06, 0x08, 0xe9, 0x07, 0x10, 0xea, 0x07, 0x4a, 0x06, 0x08, 0xea, 0x07, 0x10,
	0xeb, 0x07, 0x4a, 0x06, 0x08, 0xec, 0x07, 0x10, 0xed, 0x07, 0x4a, 0x06, 0x08, 0xee, 0x07, 0x10,
	0xef, 0x07, 0x4a, 0x06, 0x08, 0xd0, 0x0f, 0x10, 0xd1, 0x0f, 0x4a, 0x06, 0x08, 0xf4, 0x07, 0x10,
	0xf5, 0x07, 0x4a, 0x06, 0x08, 0xf6, 0x07, 0x10, 0xf7, 0x07, 0x4a, 0x06, 0x08, 0xf8, 0x07, 0x10,
	0xf9, 0x07, 0x1a, 0x8a, 0x02, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x13,
	0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x12, 0x5c, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0xef, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a,
	0x05, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0xf2, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a,
	0x06, 0x08, 0xe8, 0x07, 0x10, 0xe9, 0x07, 0x4a, 0x06, 0x08, 0xe9, 0x07, 0x10, 0xea, 0x07, 0x4a,
	0x06, 0x08, 0xea, 0x07, 0x10, 0xeb, 0x07, 0x4a, 0x06, 0x08, 0xec, 0x07, 0x10, 0xed, 0x07, 0x4a,
	0x06, 0x08, 0xed, 0x07, 0x10, 0xee, 0x07, 0x4a, 0x06, 0x08, 0xee, 0x07, 0x10, 0xef, 0x07, 0x22,
	0x39, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x50, 0x41, 0x32,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x50, 0x41, 0x33, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x57, 0x50, 0x41, 0x32, 0x57, 0x50, 0x41, 0x33, 0x10, 0x03, 0x22, 0x30, 0x0a, 0x04, 0x42, 0x61,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x46, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x46, 0x5f, 0x32, 0x47, 0x48, 0x5a, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x46, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x10, 0x05, 0x22, 0xe5, 0x01, 0x0a,
	0x0c, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x5f, 0x47, 0x5f,
	0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x5f, 0x4e, 0x5f, 0x4d,
	0x49, 0x58, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x5f, 0x4e, 0x5f, 0x4d, 0x49,
	0x58, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x5f, 0x47, 0x5f, 0x4e, 0x5f, 0x4d,
	0x49, 0x58, 0x45, 0x44, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x5f, 0x41, 0x4e, 0x5f, 0x41,
	0x43, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x5f,
	0x41, 0x43, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x5f,
	0x47, 0x5f, 0x4e, 0x5f, 0x41, 0x58, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x5f, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x5f, 0x41, 0x58, 0x5f, 0x4d, 0x49, 0x58,
	0x45, 0x44, 0x10, 0x0c, 0x22, 0x5f, 0x0a, 0x0b, 0x48, 0x54, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49,
	0x44, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x32, 0x30,
	0x5f, 0x4d, 0x48, 0x5a, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x4e,
	0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x32, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x34, 0x30, 0x5f,
	0x4d, 0x48, 0x5a, 0x10, 0x02, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x56, 0x48, 0x54, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x48, 0x54, 0x5f, 0x42, 0x41,
	0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44,
	0x54, 0x48, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x56, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x38,
	0x30, 0x5f, 0x4d, 0x48, 0x5a, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x48, 0x54, 0x5f, 0x42,
	0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x31, 0x36, 0x30, 0x5f, 0x4d, 0x48, 0x5a,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49,
	0x44, 0x54, 0x48, 0x5f, 0x38, 0x30, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x38, 0x30, 0x5f, 0x4d,
	0x48, 0x5a, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07,
	0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f,
	0x10, 0x10, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04,
	0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19,
	0x4a, 0x04, 0x08, 0x19, 0x10, 0x1a, 0x4a, 0x04, 0x08, 0x1b, 0x10, 0x1c, 0x4a, 0x04, 0x08, 0x1c,
	0x10, 0x1d, 0x4a, 0x04, 0x08, 0x1d, 0x10, 0x1e, 0x4a, 0x04, 0x08, 0x20, 0x10, 0x21, 0x4a, 0x04,
	0x08, 0x24, 0x10, 0x25, 0x4a, 0x04, 0x08, 0x26, 0x10, 0x27, 0x4a, 0x04, 0x08, 0x28, 0x10, 0x29,
	0x4a, 0x04, 0x08, 0x29, 0x10, 0x2a, 0x4a, 0x06, 0x08, 0xeb, 0x07, 0x10, 0xec, 0x07, 0x4a, 0x06,
	0x08, 0xee, 0x07, 0x10, 0xef, 0x07, 0x4a, 0x06, 0x08, 0xef, 0x07, 0x10, 0xf0, 0x07, 0x4a, 0x06,
	0x08, 0xf0, 0x07, 0x10, 0xf1, 0x07, 0x4a, 0x06, 0x08, 0xf1, 0x07, 0x10, 0xf2, 0x07, 0x4a, 0x06,
	0x08, 0xf3, 0x07, 0x10, 0xf4, 0x07, 0x4a, 0x06, 0x08, 0xf4, 0x07, 0x10, 0xf5, 0x07, 0x4a, 0x06,
	0x08, 0xf7, 0x07, 0x10, 0xf8, 0x07, 0x4a, 0x06, 0x08, 0xfd, 0x07, 0x10, 0xfe, 0x07, 0x4a, 0x06,
	0x08, 0x91, 0x08, 0x10, 0x92, 0x08, 0x4a, 0x06, 0x08, 0x9b, 0x08, 0x10, 0x9c, 0x08, 0x4a, 0x06,
	0x08, 0x9c, 0x08, 0x10, 0x9d, 0x08, 0x4a, 0x06, 0x08, 0x9d, 0x08, 0x10, 0x9e, 0x08, 0x4a, 0x06,
	0x08, 0xa0, 0x08, 0x10, 0xa1, 0x08, 0x4a, 0x06, 0x08, 0xd1, 0x0f, 0x10, 0xd2, 0x0f, 0x4a, 0x06,
	0x08, 0xd2, 0x0f, 0x10, 0xd3, 0x0f, 0x4a, 0x06, 0x08, 0xd3, 0x0f, 0x10, 0xd4, 0x0f, 0x4a, 0x06,
	0x08, 0xd4, 0x0f, 0x10, 0xd5, 0x0f, 0x4a, 0x06, 0x08, 0xd5, 0x0f, 0x10, 0xd6, 0x0f, 0x4a, 0x06,
	0x08, 0xd6, 0x0f, 0x10, 0xd7, 0x0f, 0x4a, 0x06, 0x08, 0xd7, 0x0f, 0x10, 0xd8, 0x0f, 0x4a, 0x06,
	0x08, 0xd8, 0x0f, 0x10, 0xd9, 0x0f, 0x22, 0x0a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x70,
	0x65, 0x6e, 0x22, 0x26, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x32, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x26, 0x0a, 0x08, 0x41, 0x75,
	0x74, 0x68, 0x57, 0x70, 0x61, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x2a, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x57, 0x70, 0x61, 0x32, 0x57, 0x70,
	0x61, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x8c,
	0x01, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2a, 0x64, 0x0a,
	0x08, 0x4d, 0x65, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53,
	0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4e, 0x45,
	0x57, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45,
	0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x42, 0x17, 0x5a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spacex_api_device_wifi_config_proto_rawDescOnce sync.Once
	file_spacex_api_device_wifi_config_proto_rawDescData = file_spacex_api_device_wifi_config_proto_rawDesc
)

func file_spacex_api_device_wifi_config_proto_rawDescGZIP() []byte {
	file_spacex_api_device_wifi_config_proto_rawDescOnce.Do(func() {
		file_spacex_api_device_wifi_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacex_api_device_wifi_config_proto_rawDescData)
	})
	return file_spacex_api_device_wifi_config_proto_rawDescData
}

var file_spacex_api_device_wifi_config_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_spacex_api_device_wifi_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_spacex_api_device_wifi_config_proto_goTypes = []interface{}{
	(MeshAuth)(0),                      // 0: SpaceX.API.Device.MeshAuth
	(WifiConfig_Security)(0),           // 1: SpaceX.API.Device.WifiConfig.Security
	(WifiConfig_Band)(0),               // 2: SpaceX.API.Device.WifiConfig.Band
	(WifiConfig_WirelessMode)(0),       // 3: SpaceX.API.Device.WifiConfig.WirelessMode
	(WifiConfig_HTBandwidth)(0),        // 4: SpaceX.API.Device.WifiConfig.HTBandwidth
	(WifiConfig_VHTBandwidth)(0),       // 5: SpaceX.API.Device.WifiConfig.VHTBandwidth
	(*MeshConfig)(nil),                 // 6: SpaceX.API.Device.MeshConfig
	(*WifiConfig)(nil),                 // 7: SpaceX.API.Device.WifiConfig
	(*AuthOpen)(nil),                   // 8: SpaceX.API.Device.AuthOpen
	(*AuthWpa2)(nil),                   // 9: SpaceX.API.Device.AuthWpa2
	(*AuthWpa3)(nil),                   // 10: SpaceX.API.Device.AuthWpa3
	(*AuthWpa2Wpa3)(nil),               // 11: SpaceX.API.Device.AuthWpa2Wpa3
	(*AuthRadius)(nil),                 // 12: SpaceX.API.Device.AuthRadius
	nil,                                // 13: SpaceX.API.Device.WifiConfig.MeshConfigsEntry
	nil,                                // 14: SpaceX.API.Device.WifiConfig.MeshConfigsUpdatesEntry
	(*WifiConfig_BasicServiceSet)(nil), // 15: SpaceX.API.Device.WifiConfig.BasicServiceSet
	(*WifiConfig_Network)(nil),         // 16: SpaceX.API.Device.WifiConfig.Network
	(*PublicKey)(nil),                  // 17: SpaceX.API.Device.PublicKey
	(*BootInfo)(nil),                   // 18: SpaceX.API.Device.BootInfo
}
var file_spacex_api_device_wifi_config_proto_depIdxs = []int32{
	0,  // 0: SpaceX.API.Device.MeshConfig.auth:type_name -> SpaceX.API.Device.MeshAuth
	13, // 1: SpaceX.API.Device.WifiConfig.mesh_configs:type_name -> SpaceX.API.Device.WifiConfig.MeshConfigsEntry
	14, // 2: SpaceX.API.Device.WifiConfig.mesh_configs_updates:type_name -> SpaceX.API.Device.WifiConfig.MeshConfigsUpdatesEntry
	17, // 3: SpaceX.API.Device.WifiConfig.dynamic_keys:type_name -> SpaceX.API.Device.PublicKey
	18, // 4: SpaceX.API.Device.WifiConfig.boot:type_name -> SpaceX.API.Device.BootInfo
	16, // 5: SpaceX.API.Device.WifiConfig.networks:type_name -> SpaceX.API.Device.WifiConfig.Network
	1,  // 6: SpaceX.API.Device.WifiConfig.wifi_security:type_name -> SpaceX.API.Device.WifiConfig.Security
	3,  // 7: SpaceX.API.Device.WifiConfig.wireless_mode_2ghz:type_name -> SpaceX.API.Device.WifiConfig.WirelessMode
	3,  // 8: SpaceX.API.Device.WifiConfig.wireless_mode_5ghz:type_name -> SpaceX.API.Device.WifiConfig.WirelessMode
	4,  // 9: SpaceX.API.Device.WifiConfig.ht_bandwidth_2ghz:type_name -> SpaceX.API.Device.WifiConfig.HTBandwidth
	4,  // 10: SpaceX.API.Device.WifiConfig.ht_bandwidth_5ghz:type_name -> SpaceX.API.Device.WifiConfig.HTBandwidth
	5,  // 11: SpaceX.API.Device.WifiConfig.vht_bandwidth:type_name -> SpaceX.API.Device.WifiConfig.VHTBandwidth
	6,  // 12: SpaceX.API.Device.WifiConfig.MeshConfigsEntry.value:type_name -> SpaceX.API.Device.MeshConfig
	6,  // 13: SpaceX.API.Device.WifiConfig.MeshConfigsUpdatesEntry.value:type_name -> SpaceX.API.Device.MeshConfig
	8,  // 14: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_open:type_name -> SpaceX.API.Device.AuthOpen
	9,  // 15: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_wpa2:type_name -> SpaceX.API.Device.AuthWpa2
	10, // 16: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_wpa3:type_name -> SpaceX.API.Device.AuthWpa3
	11, // 17: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_wpa2_wpa3:type_name -> SpaceX.API.Device.AuthWpa2Wpa3
	12, // 18: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_radius:type_name -> SpaceX.API.Device.AuthRadius
	2,  // 19: SpaceX.API.Device.WifiConfig.BasicServiceSet.band:type_name -> SpaceX.API.Device.WifiConfig.Band
	15, // 20: SpaceX.API.Device.WifiConfig.Network.basic_service_sets:type_name -> SpaceX.API.Device.WifiConfig.BasicServiceSet
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_spacex_api_device_wifi_config_proto_init() }
func file_spacex_api_device_wifi_config_proto_init() {
	if File_spacex_api_device_wifi_config_proto != nil {
		return
	}
	file_spacex_api_device_command_proto_init()
	file_spacex_api_device_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spacex_api_device_wifi_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthWpa2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthWpa3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthWpa2Wpa3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRadius); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiConfig_BasicServiceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiConfig_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spacex_api_device_wifi_config_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*WifiConfig_BasicServiceSet_AuthOpen)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthRadius)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacex_api_device_wifi_config_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spacex_api_device_wifi_config_proto_goTypes,
		DependencyIndexes: file_spacex_api_device_wifi_config_proto_depIdxs,
		EnumInfos:         file_spacex_api_device_wifi_config_proto_enumTypes,
		MessageInfos:      file_spacex_api_device_wifi_config_proto_msgTypes,
	}.Build()
	File_spacex_api_device_wifi_config_proto = out.File
	file_spacex_api_device_wifi_config_proto_rawDesc = nil
	file_spacex_api_device_wifi_config_proto_goTypes = nil
	file_spacex_api_device_wifi_config_proto_depIdxs = nil
}
